<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\nrf51822_xxac.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\nrf51822_xxac.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050041: Last Updated: Sat May 18 08:50:04 2019
<BR><P>
<H3>Maximum Stack Usage =        632 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ble_evt_dispatch &rArr; pm_on_ble_evt &rArr; sm_ble_evt_handler &rArr; link_secure_pending_process &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[18]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[1a7]">queue_process</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a7]">queue_process</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC_IRQHandler</a> from nrf_drv_adc.o(i.ADC_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[18]">CCM_AAR_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[17]">ECB_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[f]">GPIOTE_IRQHandler</a> from nrf_drv_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1c]">LPCOMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[a]">POWER_CLOCK_IRQHandler</a> from nrf_drv_clock.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1b]">QDEC_IRQHandler</a> from nrf_drv_qdec.o(i.QDEC_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[b]">RADIO_IRQHandler</a> from nrf_esb.o(i.RADIO_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[16]">RNG_IRQHandler</a> from nrf_drv_rng.o(i.RNG_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[14]">RTC0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1a]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[d]">SPI0_TWI0_IRQHandler</a> from nrf_drv_spi.o(i.SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[e]">SPI1_TWI1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1d]">SWI0_IRQHandler</a> from app_timer.o(i.SWI0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1e]">SWI1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1f]">SWI2_IRQHandler</a> from softdevice_handler.o(i.SWI2_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[20]">SWI3_IRQHandler</a> from nrf_esb.o(i.SWI3_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[21]">SWI4_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[22]">SWI5_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[24]">SystemInit</a> from system_nrf51.o(i.SystemInit) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[15]">TEMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[11]">TIMER0_IRQHandler</a> from nrf_drv_timer.o(i.TIMER0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[12]">TIMER1_IRQHandler</a> from nrf_drv_timer.o(i.TIMER1_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[13]">TIMER2_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[c]">UART0_IRQHandler</a> from nrf_drv_uart.o(i.UART0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[19]">WDT_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[25]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[27]">_snputc</a> from printf8.o(i._snputc) referenced from printf8.o(i.__0snprintf$8)
 <LI><a href="#[28]">adc_event_handler</a> from main.o(i.adc_event_handler) referenced from main.o(i.adc_config)
 <LI><a href="#[35]">alert_timer_handler</a> from bsp.o(i.alert_timer_handler) referenced from bsp.o(i.bsp_init)
 <LI><a href="#[2d]">app_timer_evt_get</a> from app_timer_appsh.o(i.app_timer_evt_get) referenced from app_timer_appsh.o(i.app_timer_evt_schedule)
 <LI><a href="#[48]">app_timer_evt_schedule</a> from app_timer_appsh.o(i.app_timer_evt_schedule) referenced from main.o(i.timers_init)
 <LI><a href="#[29]">ble_advertising_error_handler</a> from main.o(i.ble_advertising_error_handler) referenced from main.o(i.advertising_init)
 <LI><a href="#[30]">ble_evt_dispatch</a> from main.o(i.ble_evt_dispatch) referenced from main.o(i.ble_stack_init)
 <LI><a href="#[4d]">bsp_button_event_handler</a> from bsp.o(i.bsp_button_event_handler) referenced 8 times from bsp.o(.constdata)
 <LI><a href="#[36]">bsp_event_handler</a> from main.o(i.bsp_event_handler) referenced from main.o(i.buttons_leds_init)
 <LI><a href="#[3c]">button_event_handler</a> from main.o(i.button_event_handler) referenced from main.o(i.main)
 <LI><a href="#[33]">button_timer_handler</a> from bsp.o(i.button_timer_handler) referenced from bsp.o(i.bsp_init)
 <LI><a href="#[37]">conn_params_error_handler</a> from main.o(i.conn_params_error_handler) referenced from main.o(i.conn_params_init)
 <LI><a href="#[2c]">detection_delay_timeout_handler</a> from app_button.o(i.detection_delay_timeout_handler) referenced from app_button.o(i.app_button_init)
 <LI><a href="#[43]">fds_evt_handler</a> from peer_data_storage.o(i.fds_evt_handler) referenced from peer_data_storage.o(i.pds_init)
 <LI><a href="#[3]">fs_event_handler</a> from fds.o(i.fs_event_handler) referenced 2 times from fds.o(fs_data)
 <LI><a href="#[2]">fs_evt_handler</a> from main.o(i.fs_evt_handler) referenced 8 times from main.o(fs_data)
 <LI><a href="#[1]">gcm_gscm_evt_handler</a> from gatt_cache_manager.o(i.gcm_gscm_evt_handler) referenced 2 times from gatts_cache_manager.o(.data)
 <LI><a href="#[4f]">gcm_im_evt_handler</a> from gatt_cache_manager.o(i.gcm_im_evt_handler) referenced from id_manager.o(.constdata)
 <LI><a href="#[57]">gcm_smd_evt_handler</a> from gatt_cache_manager.o(i.gcm_smd_evt_handler) referenced from security_dispatcher.o(.constdata)
 <LI><a href="#[2b]">gpiote_event_handler</a> from app_button.o(i.gpiote_event_handler) referenced from app_button.o(i.app_button_init)
 <LI><a href="#[55]">gscm_pdb_evt_handler</a> from gatts_cache_manager.o(i.gscm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[52]">im_pdb_evt_handler</a> from id_manager.o(i.im_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[34]">leds_timer_handler</a> from bsp.o(i.leds_timer_handler) referenced from bsp.o(i.bsp_init)
 <LI><a href="#[23]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[49]">motion_timeout_handler</a> from main.o(i.motion_timeout_handler) referenced from main.o(i.timers_init)
 <LI><a href="#[38]">nrf_esb_event_handler</a> from main.o(i.nrf_esb_event_handler) referenced from main.o(i.esb_init)
 <LI><a href="#[3e]">nrf_log_backend_serial_hexdump_handler</a> from nrf_log_backend_serial.o(i.nrf_log_backend_serial_hexdump_handler) referenced from nrf_log_backend_serial.o(i.nrf_log_backend_hexdump_handler_get)
 <LI><a href="#[3f]">nrf_log_backend_serial_std_handler</a> from nrf_log_backend_serial.o(i.nrf_log_backend_serial_std_handler) referenced from nrf_log_backend_serial.o(i.nrf_log_backend_std_handler_get)
 <LI><a href="#[2a]">on_adv_evt</a> from main.o(i.on_adv_evt) referenced from main.o(i.advertising_init)
 <LI><a href="#[39]">on_hids_evt</a> from main.o(i.on_hids_evt) referenced from main.o(i.hids_init)
 <LI><a href="#[3d]">on_radio_disabled_rx</a> from nrf_esb.o(i.on_radio_disabled_rx) referenced from nrf_esb.o(i.nrf_esb_start_rx)
 <LI><a href="#[3d]">on_radio_disabled_rx</a> from nrf_esb.o(i.on_radio_disabled_rx) referenced from nrf_esb.o(i.on_radio_disabled_rx_ack)
 <LI><a href="#[40]">on_radio_disabled_rx_ack</a> from nrf_esb.o(i.on_radio_disabled_rx_ack) referenced from nrf_esb.o(i.on_radio_disabled_rx)
 <LI><a href="#[42]">on_radio_disabled_tx</a> from nrf_esb.o(i.on_radio_disabled_tx) referenced from nrf_esb.o(i.on_radio_disabled_tx_wait_for_ack)
 <LI><a href="#[42]">on_radio_disabled_tx</a> from nrf_esb.o(i.on_radio_disabled_tx) referenced from nrf_esb.o(i.start_tx_transaction)
 <LI><a href="#[47]">on_radio_disabled_tx_noack</a> from nrf_esb.o(i.on_radio_disabled_tx_noack) referenced from nrf_esb.o(i.start_tx_transaction)
 <LI><a href="#[41]">on_radio_disabled_tx_wait_for_ack</a> from nrf_esb.o(i.on_radio_disabled_tx_wait_for_ack) referenced from nrf_esb.o(i.on_radio_disabled_tx)
 <LI><a href="#[50]">pdb_pds_evt_handler</a> from peer_database.o(i.pdb_pds_evt_handler) referenced from peer_data_storage.o(.constdata)
 <LI><a href="#[44]">pm_evt_handler</a> from main.o(i.pm_evt_handler) referenced from main.o(i.peer_manager_init)
 <LI><a href="#[0]">pm_gcm_evt_handler</a> from peer_manager.o(i.pm_gcm_evt_handler) referenced 2 times from gatt_cache_manager.o(.data)
 <LI><a href="#[4e]">pm_im_evt_handler</a> from peer_manager.o(i.pm_im_evt_handler) referenced from id_manager.o(.constdata)
 <LI><a href="#[51]">pm_pdb_evt_handler</a> from peer_manager.o(i.pm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[58]">pm_sm_evt_handler</a> from peer_manager.o(i.pm_sm_evt_handler) referenced from security_manager.o(.constdata)
 <LI><a href="#[32]">qdec_event_handler</a> from main.o(i.qdec_event_handler) referenced from main.o(i.bsp_event_handler)
 <LI><a href="#[32]">qdec_event_handler</a> from main.o(i.qdec_event_handler) referenced 3 times from main.o(i.main)
 <LI><a href="#[3a]">service_error_handler</a> from main.o(i.service_error_handler) referenced from main.o(i.hids_init)
 <LI><a href="#[4a]">sleep_timeout_handler</a> from main.o(i.sleep_timeout_handler) referenced from main.o(i.timers_init)
 <LI><a href="#[53]">sm_pdb_evt_handler</a> from security_manager.o(i.sm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[56]">sm_smd_evt_handler</a> from security_manager.o(i.sm_smd_evt_handler) referenced from security_dispatcher.o(.constdata)
 <LI><a href="#[54]">smd_pdb_evt_handler</a> from security_dispatcher.o(i.smd_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[45]">softdevice_evt_get</a> from softdevice_handler_appsh.o(i.softdevice_evt_get) referenced from softdevice_handler_appsh.o(i.softdevice_evt_schedule)
 <LI><a href="#[2f]">softdevice_evt_schedule</a> from softdevice_handler_appsh.o(i.softdevice_evt_schedule) referenced from main.o(i.ble_stack_init)
 <LI><a href="#[46]">softdevice_fault_handler</a> from softdevice_handler.o(i.softdevice_fault_handler) referenced from softdevice_handler.o(i.softdevice_handler_init)
 <LI><a href="#[26]">spi_event_handler</a> from main.o(i.spi_event_handler) referenced from motion_sensor.o(i.CheckSensor)
 <LI><a href="#[26]">spi_event_handler</a> from main.o(i.spi_event_handler) referenced 2 times from main.o(i.bsp_event_handler)
 <LI><a href="#[26]">spi_event_handler</a> from main.o(i.spi_event_handler) referenced from main.o(i.fs_evt_handler)
 <LI><a href="#[26]">spi_event_handler</a> from main.o(i.spi_event_handler) referenced 4 times from main.o(i.main)
 <LI><a href="#[26]">spi_event_handler</a> from main.o(i.spi_event_handler) referenced 2 times from main.o(i.motion_timeout_handler)
 <LI><a href="#[26]">spi_event_handler</a> from main.o(i.spi_event_handler) referenced from main.o(i.on_adv_evt)
 <LI><a href="#[26]">spi_event_handler</a> from main.o(i.spi_event_handler) referenced from main.o(i.pm_evt_handler)
 <LI><a href="#[26]">spi_event_handler</a> from main.o(i.spi_event_handler) referenced from main.o(i.set_BT_work_mode)
 <LI><a href="#[31]">sys_evt_dispatch</a> from main.o(i.sys_evt_dispatch) referenced from main.o(i.ble_stack_init)
 <LI><a href="#[3b]">timer_led_event_handler</a> from main.o(i.timer_led_event_handler) referenced from main.o(i.main)
 <LI><a href="#[4c]">update_rf_payload_format_esb</a> from nrf_esb.o(i.update_rf_payload_format_esb) referenced from nrf_esb.o(i.update_radio_protocol)
 <LI><a href="#[4b]">update_rf_payload_format_esb_dpl</a> from nrf_esb.o(i.update_rf_payload_format_esb_dpl) referenced from nrf_esb.o(i.update_radio_protocol)
 <LI><a href="#[2e]">update_timeout_handler</a> from ble_conn_params.o(i.update_timeout_handler) referenced from ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[25]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[30a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[59]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[63]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[30b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[30c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[30d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[30e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[30f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[310]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_event_handler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[311]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_get
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt
</UL>

<P><STRONG><a name="[26e]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peers_id_keys_get
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_change_conn_params
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_0
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_read_rx_payload
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_boot_mouse_inp_rep_send
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_whitelist_reply
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_peer_addr_reply
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_sec_params_set
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_connection
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_whitelist_set
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_addr_get
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_read
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_fifo_push_rfbuf
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_rx
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_pending_flags_check
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_enqueue
</UL>

<P><STRONG><a name="[312]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[313]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[314]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_state_reset
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_whitelist_set
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peers_id_keys_get
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_gcm_evt_handler
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bas_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable_get_default_config
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sm_evt_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_im_evt_handler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ah
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rep_map_char_add
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rep_char_add
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_mode_char_add
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_information_char_add
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_control_point_char_add
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_kb_outp_rep_char_add
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_inp_rep_char_add
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_get_next_free
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_advance
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
</UL>

<P><STRONG><a name="[315]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[12e]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_ascii_to_utf8
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[9a]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[316]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[317]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[318]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[319]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>ADC_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, nrf_drv_adc.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_IRQHandler &rArr; adc_sample_process
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_int_disable
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_event_clear
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>CheckSensor</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, motion_sensor.o(i.CheckSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CheckSensor &rArr; ChenkSensorSync &rArr; readReg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomSensorReSynchronousSPI
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChenkSensorSync
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrPaw3205ReSynchronousSPI
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMotion
</UL>

<P><STRONG><a name="[68]"></a>ChenkSensorSync</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, motion_sensor.o(i.ChenkSensorSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ChenkSensorSync &rArr; readReg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSensor
</UL>

<P><STRONG><a name="[6c]"></a>CustomSensorReSynchronousSPI</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, motion_sensor.o(i.CustomSensorReSynchronousSPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CustomSensorReSynchronousSPI &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSensor
</UL>

<P><STRONG><a name="[f]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 618 bytes, Stack size 80 bytes, nrf_drv_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = GPIOTE_IRQHandler &rArr; nrf_gpio_ports_read
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[22b]"></a>NRF_power_manage</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.NRF_power_manage))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = POWER_CLOCK_IRQHandler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_disable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>QDEC_IRQHandler</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, nrf_drv_qdec.o(i.QDEC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QDEC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_qdec_int_enable_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>RADIO_IRQHandler</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, nrf_esb.o(i.RADIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RADIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RNG_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, nrf_drv_rng.o(i.RNG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RNG_IRQHandler &rArr; nrf_queue_push &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_is_enabled
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_stop
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_full
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RTC1_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check &rArr; timeout_handler_exec &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SPI0_TWI0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_spi.o(i.SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI0_TWI0_IRQHandler &rArr; irq_handler_spi &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SWI0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_timer.o(i.SWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SWI0_IRQHandler &rArr; timer_list_handler &rArr; compare_reg_update &rArr; timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SWI2_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, softdevice_handler.o(i.SWI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SWI2_IRQHandler &rArr; intern_softdevice_events_execute &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SWI3_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nrf_esb.o(i.SWI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SWI3_IRQHandler &rArr; nrf_esb_get_clear_interrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_clear_interrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, system_nrf51.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_manual_peripheral_setup_needed
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_disabled_in_debug_needed
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_peripheral_domain_setup_needed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[11]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_timer.o(i.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER0_IRQHandler &rArr; irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_timer.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER1_IRQHandler &rArr; irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>UART0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART0_IRQHandler &rArr; uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>__0snprintf$8</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[31b]"></a>__1snprintf$8</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)

<P><STRONG><a name="[270]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_process
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
</UL>

<P><STRONG><a name="[6a]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_gcm_evt_handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flash_write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_of_page
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSensor
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sm_evt_handler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdb_evt_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_prepare
</UL>

<P><STRONG><a name="[31c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[31d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[31e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[99]"></a>addr_compare</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, id_manager.o(i.addr_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = addr_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[9f]"></a>address_of_page</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, main.o(i.address_of_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = address_of_page &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flash_write
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[a0]"></a>adv_data_encode</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, ble_advdata.o(i.adv_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_power_level_encode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_encode
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[b7]"></a>ah</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, id_manager.o(i.ah))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ah
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
</UL>

<P><STRONG><a name="[bb]"></a>app_button_enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_button.o(i.app_button_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = app_button_enable &rArr; nrf_drv_gpiote_in_event_enable &rArr; nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[bd]"></a>app_button_init</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, app_button.o(i.app_button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = app_button_init &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_is_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[c2]"></a>app_error_fault_handler</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_blocking_backend_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_fault_handler
</UL>

<P><STRONG><a name="[6e]"></a>app_error_handler_bare</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_report_ref_encode
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_led_event_handler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_timeout_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_generate_random_addr
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BT_work_mode
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_rf_channel_switch
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_error_handler
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_vector_generate
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouse_scroll_send
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouse_movement_send
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouse_key_send
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouse_Authorization_send
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_evt_handler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_error_handler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_leds_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_error_handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bas_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReg
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSensor
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_hid_information
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_id_encode
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnp_id_encode
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_evt_get
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_get
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>app_sched_event_put</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, app_scheduler.o(i.app_sched_event_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_sched_event_put &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_index
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_schedule
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_evt_schedule
</UL>

<P><STRONG><a name="[c9]"></a>app_sched_execute</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, app_scheduler.o(i.app_sched_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_sched_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_index
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2dd]"></a>app_sched_init</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, app_scheduler.o(i.app_sched_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_sched_init
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_init
</UL>

<P><STRONG><a name="[c1]"></a>app_timer_create</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
</UL>

<P><STRONG><a name="[48]"></a>app_timer_evt_schedule</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, app_timer_appsh.o(i.app_timer_evt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = app_timer_evt_schedule &rArr; app_sched_event_put &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.timers_init)
</UL>
<P><STRONG><a name="[ca]"></a>app_timer_init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_timer_init &rArr; rtc1_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
</UL>

<P><STRONG><a name="[d1]"></a>app_timer_start</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_timeout_handler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
</UL>

<P><STRONG><a name="[b9]"></a>app_timer_stop</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_timeout_handler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_timer_handler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
</UL>

<P><STRONG><a name="[80]"></a>app_util_critical_region_enter</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_uninit
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_rand
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_init
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_by_mask
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_IRQHandler
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_reset
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_read
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[85]"></a>app_util_critical_region_exit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_uninit
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_rand
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_init
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_by_mask
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_IRQHandler
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_reset
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_read
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[eb]"></a>ble_advdata_set</STRONG> (Thumb, 152 bytes, Stack size 104 bytes, ble_advdata.o(i.ble_advdata_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srdata_check
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advdata_check
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_restart_without_whitelist
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[b1]"></a>ble_advertising_init</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, ble_advertising.o(i.ble_advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[ee]"></a>ble_advertising_on_ble_evt</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ble_advertising_on_ble_evt &rArr; on_disconnected &rArr; ble_advertising_restart_without_whitelist &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timeout
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[f2]"></a>ble_advertising_on_sys_evt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ble_advertising.o(i.ble_advertising_on_sys_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ble_advertising_on_sys_evt &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>

<P><STRONG><a name="[f3]"></a>ble_advertising_peer_addr_reply</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_peer_addr_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_advertising_peer_addr_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
</UL>

<P><STRONG><a name="[f4]"></a>ble_advertising_restart_without_whitelist</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_restart_without_whitelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ble_advertising_restart_without_whitelist &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected
</UL>

<P><STRONG><a name="[b6]"></a>ble_advertising_start</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, ble_advertising.o(i.ble_advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flash_read
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_of_page
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_directed_slow
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_directed
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_access_in_progress
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_avail_get
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timeout
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_restart_without_whitelist
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_sys_evt
</UL>

<P><STRONG><a name="[fc]"></a>ble_advertising_whitelist_reply</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, ble_advertising.o(i.ble_advertising_whitelist_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_advertising_whitelist_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
</UL>

<P><STRONG><a name="[e8]"></a>ble_bas_init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ble_bas.o(i.ble_bas_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ble_bas_init &rArr; battery_level_char_add &rArr; ble_srv_report_ref_encode &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bas_init
</UL>

<P><STRONG><a name="[fd]"></a>ble_bas_on_ble_evt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ble_bas.o(i.ble_bas_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_bas_on_ble_evt &rArr; on_write &rArr; ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[101]"></a>ble_conn_params_change_conn_params</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_conn_params_change_conn_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_conn_params_change_conn_params
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>

<P><STRONG><a name="[103]"></a>ble_conn_params_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_conn_params_init &rArr; app_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
</UL>

<P><STRONG><a name="[104]"></a>ble_conn_params_on_ble_evt</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ble_conn_params.o(i.ble_conn_params_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ble_conn_params_on_ble_evt &rArr; on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[d9]"></a>ble_conn_state_conn_handles</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_conn_handles))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_conn_state_conn_handles &rArr; sdk_mapped_flags_key_list_get
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_pending_flags_check
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
</UL>

<P><STRONG><a name="[10a]"></a>ble_conn_state_encrypted</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_encrypted))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_conn_state_encrypted &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
</UL>

<P><STRONG><a name="[10c]"></a>ble_conn_state_mitm_protected</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_mitm_protected))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_conn_state_mitm_protected &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
</UL>

<P><STRONG><a name="[10d]"></a>ble_conn_state_on_ble_evt</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ble_conn_state_on_ble_evt &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_set_disconnected
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_activate
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[e1]"></a>ble_conn_state_role</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_role))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_conn_state_role &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[112]"></a>ble_conn_state_user_flag_acquire</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
</UL>

<P><STRONG><a name="[d7]"></a>ble_conn_state_user_flag_collection</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_collection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_conn_state_user_flag_collection
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_pending_flags_check
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
</UL>

<P><STRONG><a name="[db]"></a>ble_conn_state_user_flag_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_pending_flags_check
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sm_evt_handler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_connection
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[e3]"></a>ble_conn_state_user_flag_set</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gscm_evt_handler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_conn_sec_config_reply
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sm_evt_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_im_evt_handler
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_connection
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[115]"></a>ble_dis_init</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, ble_dis.o(i.ble_dis_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ble_dis_init &rArr; char_add &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_id_encode
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnp_id_encode
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_init
</UL>

<P><STRONG><a name="[11d]"></a>ble_hids_boot_mouse_inp_rep_send</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, ble_hids.o(i.ble_hids_boot_mouse_inp_rep_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_hids_boot_mouse_inp_rep_send
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouse_movement_send
</UL>

<P><STRONG><a name="[11e]"></a>ble_hids_init</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, ble_hids.o(i.ble_hids_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ble_hids_init &rArr; inp_rep_characteristics_add &rArr; rep_char_add &rArr; ble_srv_report_ref_encode &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rep_map_char_add
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_mode_char_add
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outp_rep_characteristics_add
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inp_rep_characteristics_add
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;includes_add
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_information_char_add
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_control_point_char_add
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_rep_characteristics_add
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_kb_outp_rep_char_add
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_inp_rep_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_init
</UL>

<P><STRONG><a name="[230]"></a>ble_hids_inp_rep_send</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, ble_hids.o(i.ble_hids_inp_rep_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_hids_inp_rep_send
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouse_scroll_send
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouse_movement_send
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouse_key_send
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouse_Authorization_send
</UL>

<P><STRONG><a name="[11c]"></a>ble_hids_on_ble_evt</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ble_hids.o(i.ble_hids_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ble_hids_on_ble_evt &rArr; on_write &rArr; on_report_cccd_write &rArr; ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rw_authorize_request
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[12d]"></a>ble_srv_ascii_to_utf8</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_srv_common.o(i.ble_srv_ascii_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_srv_ascii_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_init
</UL>

<P><STRONG><a name="[12f]"></a>ble_srv_is_notification_enabled</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_srv_common.o(i.ble_srv_is_notification_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_report_cccd_write
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>

<P><STRONG><a name="[ea]"></a>ble_srv_report_ref_encode</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ble_srv_common.o(i.ble_srv_report_ref_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ble_srv_report_ref_encode &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rep_char_add
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
</UL>

<P><STRONG><a name="[141]"></a>bsp_board_button_state_get</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, boards.o(i.bsp_board_button_state_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_board_button_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_is_pressed
</UL>

<P><STRONG><a name="[b8]"></a>bsp_board_led_invert</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, boards.o(i.bsp_board_led_invert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsp_board_led_invert
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_led_event_handler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_timer_handler
</UL>

<P><STRONG><a name="[ba]"></a>bsp_board_led_off</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_led_event_handler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_timer_handler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
</UL>

<P><STRONG><a name="[fb]"></a>bsp_board_led_on</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_board_led_on &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_led_event_handler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_on
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[14c]"></a>bsp_board_led_state_get</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_state_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_board_led_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[138]"></a>bsp_board_leds_init</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, boards.o(i.bsp_board_leds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bsp_board_leds_init &rArr; bsp_board_leds_off &rArr; bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[13a]"></a>bsp_board_leds_off</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, boards.o(i.bsp_board_leds_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_board_leds_off &rArr; bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
</UL>

<P><STRONG><a name="[13b]"></a>bsp_board_leds_on</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, boards.o(i.bsp_board_leds_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_board_leds_on &rArr; bsp_board_led_on &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[13f]"></a>bsp_board_pin_to_button_idx</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, boards.o(i.bsp_board_pin_to_button_idx))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>

<P><STRONG><a name="[13c]"></a>bsp_btn_ble_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_btn_ble.o(i.bsp_btn_ble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_btn_ble_init &rArr; startup_event_extract &rArr; bsp_button_is_pressed &rArr; bsp_board_button_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_event_extract
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_leds_init
</UL>

<P><STRONG><a name="[11a]"></a>bsp_btn_ble_on_ble_evt</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, bsp_btn_ble.o(i.bsp_btn_ble_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_btn_ble_on_ble_evt &rArr; connection_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_buttons_configure
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[140]"></a>bsp_button_is_pressed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp.o(i.bsp_button_is_pressed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_button_is_pressed &rArr; bsp_board_button_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_button_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_event_extract
</UL>

<P><STRONG><a name="[ae]"></a>bsp_event_to_button_action_assign</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, bsp.o(i.bsp_event_to_button_action_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_buttons_configure
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[148]"></a>bsp_indication_set</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp.o(i.bsp_indication_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
</UL>

<P><STRONG><a name="[14b]"></a>bsp_init</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, bsp.o(i.bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = bsp_init &rArr; app_button_init &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_leds_init
</UL>

<P><STRONG><a name="[273]"></a>buffer_is_empty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.buffer_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[3c]"></a>button_event_handler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, main.o(i.button_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = button_event_handler &rArr; nrf_drv_gpiote_in_event_disable &rArr; nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clocks_start
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_enable
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[28a]"></a>chunk_queue_next</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fds.o(i.chunk_queue_next))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_enqueue
</UL>

<P><STRONG><a name="[14f]"></a>clocks_start</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.clocks_start))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_event_handler
</UL>

<P><STRONG><a name="[168]"></a>driver_rf_channel_switch</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, main.o(i.driver_rf_channel_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = driver_rf_channel_switch &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_rf_channel
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16a]"></a>driver_sensor_two_spi_read_byte</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, motion_sensor.o(i.driver_sensor_two_spi_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = driver_sensor_two_spi_read_byte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg
</UL>

<P><STRONG><a name="[16d]"></a>driver_sensor_two_spi_send_byte</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, motion_sensor.o(i.driver_sensor_two_spi_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = driver_sensor_two_spi_send_byte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReg
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg
</UL>

<P><STRONG><a name="[16f]"></a>encrypt</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, encrypt.o(i.encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = encrypt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[145]"></a>enterOrExitSleepmode</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, motion_sensor.o(i.enterOrExitSleepmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = enterOrExitSleepmode &rArr; writeReg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReg
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BT_work_mode
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_evt_handler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
</UL>

<P><STRONG><a name="[171]"></a>esb_init</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, main.o(i.esb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = esb_init &rArr; nrf_esb_update_prefix &rArr; update_radio_addresses &rArr; addr_conv
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_update_prefix
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_tx_power
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_0
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_address_length
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[181]"></a>fds_file_delete</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, fds.o(i.fds_file_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_enqueue
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
</UL>

<P><STRONG><a name="[185]"></a>fds_gc</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, fds.o(i.fds_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = fds_gc &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_enqueue
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
</UL>

<P><STRONG><a name="[186]"></a>fds_init</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, fds.o(i.fds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = fds_init &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_enqueue
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_set
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_clear
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[18c]"></a>fds_record_close</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fds.o(i.fds_record_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fds_record_close &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_load
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
</UL>

<P><STRONG><a name="[18e]"></a>fds_record_find</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, fds.o(i.fds_record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
</UL>

<P><STRONG><a name="[190]"></a>fds_record_find_by_key</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, fds.o(i.fds_record_find_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fds_record_find_by_key &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_load
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
</UL>

<P><STRONG><a name="[191]"></a>fds_record_find_in_file</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, fds.o(i.fds_record_find_in_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fds_record_find_in_file &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
</UL>

<P><STRONG><a name="[2b3]"></a>fds_record_id_from_desc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fds.o(i.fds_record_id_from_desc))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[192]"></a>fds_record_open</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, fds.o(i.fds_record_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fds_record_open &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_load
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
</UL>

<P><STRONG><a name="[193]"></a>fds_record_update</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fds.o(i.fds_record_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = fds_record_update &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[195]"></a>fds_record_write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fds.o(i.fds_record_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[196]"></a>fds_record_write_reserved</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fds.o(i.fds_record_write_reserved))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[2aa]"></a>fds_register</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fds.o(i.fds_register))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[197]"></a>fds_reserve</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, fds.o(i.fds_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fds_reserve &rArr; write_space_reserve
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_reserve
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve
</UL>

<P><STRONG><a name="[199]"></a>fds_reserve_cancel</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fds.o(i.fds_reserve_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fds_reserve_cancel &rArr; write_space_free
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_free
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve_cancel
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[1a3]"></a>fs_erase</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, fstorage.o(i.fs_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fs_erase &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_get_next_free
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flash_write
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_erase
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>

<P><STRONG><a name="[189]"></a>fs_init</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, fstorage.o(i.fs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fs_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flash_page_end_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>

<P><STRONG><a name="[1a2]"></a>fs_queued_op_count_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fstorage.o(i.fs_queued_op_count_get))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_access_in_progress
</UL>

<P><STRONG><a name="[1aa]"></a>fs_store</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, fstorage.o(i.fs_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_get_next_free
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flash_write
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_evt_handler
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_write_chunk
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_id
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_finalize
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_begin
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
</UL>

<P><STRONG><a name="[1ac]"></a>fs_sys_event_handler</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fstorage.o(i.fs_sys_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fs_sys_event_handler &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_success
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>

<P><STRONG><a name="[1c1]"></a>gcm_ble_evt_handler</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, gatt_cache_manager.o(i.gcm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = gcm_ble_evt_handler &rArr; update_pending_flags_check &rArr; local_db_update_in_evt &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cccd_written
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_pending_flags_check
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_on_ble_evt
</UL>

<P><STRONG><a name="[1]"></a>gcm_gscm_evt_handler</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, gatt_cache_manager.o(i.gcm_gscm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = gcm_gscm_evt_handler &rArr; service_changed_pending_flags_check &rArr; service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatts_cache_manager.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>gcm_im_evt_handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.gcm_im_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = gcm_im_evt_handler &rArr; local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_manager.o(.constdata)
</UL>
<P><STRONG><a name="[1ca]"></a>gcm_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.gcm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gcm_init &rArr; ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_state_reset
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[1cc]"></a>gcm_local_database_has_changed</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, gatt_cache_manager.o(i.gcm_local_database_has_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = gcm_local_database_has_changed &rArr; service_changed_pending_flags_check &rArr; service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_database_has_changed
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_local_database_has_changed
</UL>

<P><STRONG><a name="[57]"></a>gcm_smd_evt_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.gcm_smd_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = gcm_smd_evt_handler &rArr; local_db_update_in_evt &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> security_dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[1ce]"></a>getMotion</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, motion_sensor.o(i.getMotion))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = getMotion &rArr; CheckSensor &rArr; ChenkSensorSync &rArr; readReg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSensor
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
</UL>

<P><STRONG><a name="[1cf]"></a>get_connection_by_conn_handle</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, id_manager.o(i.get_connection_by_conn_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_set
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_connection
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_addr_get
</UL>

<P><STRONG><a name="[1d0]"></a>get_free_connection</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, id_manager.o(i.get_free_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_free_connection &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_connection
</UL>

<P><STRONG><a name="[1c2]"></a>gscm_db_change_notification_done</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gatts_cache_manager.o(i.gscm_db_change_notification_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_raw_store
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
</UL>

<P><STRONG><a name="[1d2]"></a>gscm_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gatts_cache_manager.o(i.gscm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gscm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_state_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[1cd]"></a>gscm_local_database_has_changed</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gatts_cache_manager.o(i.gscm_local_database_has_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = gscm_local_database_has_changed &rArr; service_changed_pending_set &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
</UL>

<P><STRONG><a name="[1d6]"></a>gscm_local_db_cache_apply</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, gatts_cache_manager.o(i.gscm_local_db_cache_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = gscm_local_db_cache_apply &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
</UL>

<P><STRONG><a name="[1d8]"></a>gscm_local_db_cache_update</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, gatts_cache_manager.o(i.gscm_local_db_cache_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
</UL>

<P><STRONG><a name="[55]"></a>gscm_pdb_evt_handler</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, gatts_cache_manager.o(i.gscm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = gscm_pdb_evt_handler &rArr; service_changed_pending_set &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[1c9]"></a>gscm_service_changed_ind_needed</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, gatts_cache_manager.o(i.gscm_service_changed_ind_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = gscm_service_changed_ind_needed &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
</UL>

<P><STRONG><a name="[2e7]"></a>gscm_service_changed_ind_send</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gatts_cache_manager.o(i.gscm_service_changed_ind_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gscm_service_changed_ind_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
</UL>

<P><STRONG><a name="[1dd]"></a>im_address_resolve</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, id_manager.o(i.im_address_resolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = im_address_resolve &rArr; ah
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ah
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[1de]"></a>im_ble_addr_get</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, id_manager.o(i.im_ble_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = im_ble_addr_get &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
</UL>

<P><STRONG><a name="[1df]"></a>im_ble_evt_handler</STRONG> (Thumb, 404 bytes, Stack size 96 bytes, id_manager.o(i.im_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = im_ble_evt_handler &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_connection
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_on_ble_evt
</UL>

<P><STRONG><a name="[1c8]"></a>im_conn_handle_get</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, id_manager.o(i.im_conn_handle_get))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_gcm_evt_handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gscm_evt_handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_pdb_evt_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_pdb_evt_handler
</UL>

<P><STRONG><a name="[2c0]"></a>im_device_identities_list_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, id_manager.o(i.im_device_identities_list_set))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_device_identities_list_set
</UL>

<P><STRONG><a name="[1e5]"></a>im_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, id_manager.o(i.im_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = im_init &rArr; ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_state_reset
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[1e7]"></a>im_is_duplicate_bonding_data</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, id_manager.o(i.im_is_duplicate_bonding_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = im_is_duplicate_bonding_data &rArr; addr_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_irk
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_pdb_evt_handler
</UL>

<P><STRONG><a name="[1ea]"></a>im_master_id_is_valid</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, id_manager.o(i.im_master_id_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
</UL>

<P><STRONG><a name="[1e9]"></a>im_master_ids_compare</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, id_manager.o(i.im_master_ids_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = im_master_ids_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_id_is_valid
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
</UL>

<P><STRONG><a name="[1e3]"></a>im_new_peer_id</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, id_manager.o(i.im_new_peer_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = im_new_peer_id &rArr; peer_id_set &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
</UL>

<P><STRONG><a name="[52]"></a>im_pdb_evt_handler</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, id_manager.o(i.im_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = im_pdb_evt_handler &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>im_peer_free</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, id_manager.o(i.im_peer_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_set
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_delete
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[e2]"></a>im_peer_id_get_by_conn_handle</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, id_manager.o(i.im_peer_id_get_by_conn_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sm_evt_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_im_evt_handler
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[1ed]"></a>im_peer_id_get_by_master_id</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, id_manager.o(i.im_peer_id_get_by_master_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = im_peer_id_get_by_master_id &rArr; pds_peer_data_iterate &rArr; fds_record_find_by_key &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
</UL>

<P><STRONG><a name="[1ee]"></a>im_whitelist_get</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, id_manager.o(i.im_whitelist_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = im_whitelist_get &rArr; peers_id_keys_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peers_id_keys_get
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_whitelist_get
</UL>

<P><STRONG><a name="[1f0]"></a>im_whitelist_set</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, id_manager.o(i.im_whitelist_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = im_whitelist_set
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_whitelist_set
</UL>

<P><STRONG><a name="[89]"></a>intern_softdevice_events_execute</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, softdevice_handler.o(i.intern_softdevice_events_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = intern_softdevice_events_execute &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_soc_event
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_get
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
</UL>

<P><STRONG><a name="[1e8]"></a>is_valid_irk</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, id_manager.o(i.is_valid_irk))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
</UL>

<P><STRONG><a name="[fa]"></a>m_flash_read</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, main.o(i.m_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = m_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[146]"></a>m_flash_write</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, main.o(i.m_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = m_flash_write &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_of_page
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_evt_handler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
</UL>

<P><STRONG><a name="[23]"></a>main</STRONG> (Thumb, 4494 bytes, Stack size 136 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = main &rArr; services_init &rArr; hids_init &rArr; ble_hids_init &rArr; inp_rep_characteristics_add &rArr; rep_char_add &rArr; ble_srv_report_ref_encode &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_encrypt_information
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_off
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_generate_random_addr
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_tx_carrier
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_base_address_0_encrypt
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_base_address_0
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flash_write
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flash_read
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_rf_channel_switch
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clocks_start
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_of_page
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_power_manage
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_manage
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_qdec_reportper_to_value
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_word_write
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_leds_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrPaw3205setCPI
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrPaw3205ReSynchronousSPI
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOn
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_next_peer_id_get
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_update_prefix
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_stop_rx
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_start_rx
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_rf_channel
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_extended_compare
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_enable
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_disable
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_qdec_uninit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_qdec_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_qdec_enable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_uninit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMotion
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterOrExitSleepmode
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_restart_without_whitelist
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_execute
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[226]"></a>modify_base_address_0</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(i.modify_base_address_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = modify_base_address_0 &rArr; nrf_esb_set_base_address_0 &rArr; update_radio_addresses &rArr; addr_conv
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_0
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21e]"></a>modify_base_address_0_encrypt</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(i.modify_base_address_0_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = modify_base_address_0_encrypt &rArr; nrf_esb_set_base_address_0 &rArr; update_radio_addresses &rArr; addr_conv
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_0
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e2]"></a>new_connection</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, id_manager.o(i.new_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = new_connection &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_connection
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[232]"></a>next_id_get</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, peer_id.o(i.next_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_used
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
</UL>

<P><STRONG><a name="[22d]"></a>nrf_drv_adc_buffer_convert</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, nrf_drv_adc.o(i.nrf_drv_adc_buffer_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_adc_buffer_convert &rArr; adc_sample_process
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_int_enable
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_event_clear
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_event_check
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_config_set
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample_process
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_led_event_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
</UL>

<P><STRONG><a name="[96]"></a>nrf_drv_adc_channel_enable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_drv_adc_channel_enable))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[95]"></a>nrf_drv_adc_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrf_drv_adc.o(i.nrf_drv_adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_adc_init &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[22e]"></a>nrf_drv_adc_sample</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_drv_adc_sample))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_led_event_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
</UL>

<P><STRONG><a name="[97]"></a>nrf_drv_adc_uninit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf_drv_adc.o(i.nrf_drv_adc_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_adc_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_event_handler
</UL>

<P><STRONG><a name="[237]"></a>nrf_drv_clock_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_is_enabled
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
</UL>

<P><STRONG><a name="[238]"></a>nrf_drv_clock_on_sd_enable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_on_sd_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_clock_on_sd_enable &rArr; nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
</UL>

<P><STRONG><a name="[1f6]"></a>nrf_drv_clock_on_soc_event</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_on_soc_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_clock_on_soc_event &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>

<P><STRONG><a name="[236]"></a>nrf_drv_common_irq_enable</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_drv_common.o(i.nrf_drv_common_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_qdec_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_setup
</UL>

<P><STRONG><a name="[14e]"></a>nrf_drv_gpiote_in_event_disable</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_event_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_drv_gpiote_in_event_disable &rArr; nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_event_handler
</UL>

<P><STRONG><a name="[bc]"></a>nrf_drv_gpiote_in_event_enable</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_drv_gpiote_in_event_enable &rArr; nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_int_enable
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
</UL>

<P><STRONG><a name="[c0]"></a>nrf_drv_gpiote_in_init</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_gpiote
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[165]"></a>nrf_drv_gpiote_in_is_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_gpiote_in_is_set
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_delay_timeout_handler
</UL>

<P><STRONG><a name="[bf]"></a>nrf_drv_gpiote_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_gpiote_init &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_clear
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_int_enable
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[be]"></a>nrf_drv_gpiote_is_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_is_init))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[244]"></a>nrf_drv_qdec_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_drv_qdec.o(i.nrf_drv_qdec_disable))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_qdec_uninit
</UL>

<P><STRONG><a name="[144]"></a>nrf_drv_qdec_enable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_qdec.o(i.nrf_drv_qdec_enable))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
</UL>

<P><STRONG><a name="[142]"></a>nrf_drv_qdec_init</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, nrf_drv_qdec.o(i.nrf_drv_qdec_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_drv_qdec_init &rArr; nrf_gpio_cfg_input
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
</UL>

<P><STRONG><a name="[229]"></a>nrf_drv_qdec_uninit</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, nrf_drv_qdec.o(i.nrf_drv_qdec_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nrf_drv_qdec_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_qdec_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_timeout_handler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
</UL>

<P><STRONG><a name="[245]"></a>nrf_drv_rng_bytes_available</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_drv_rng.o(i.nrf_drv_rng_bytes_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_rng_bytes_available &rArr; nrf_queue_utilization_get &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_is_enabled
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_vector_generate
</UL>

<P><STRONG><a name="[247]"></a>nrf_drv_rng_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nrf_drv_rng.o(i.nrf_drv_rng_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_rng_init &rArr; nrf_drv_rng_setup &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_is_enabled
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_start
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_generate_random_addr
</UL>

<P><STRONG><a name="[24a]"></a>nrf_drv_rng_rand</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, nrf_drv_rng.o(i.nrf_drv_rng_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_drv_rng_rand &rArr; nrf_queue_read &rArr; queue_read
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_is_enabled
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_start
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_vector_generate
</UL>

<P><STRONG><a name="[24c]"></a>nrf_drv_rng_uninit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, nrf_drv_rng.o(i.nrf_drv_rng_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_rng_uninit &rArr; nrf_queue_reset &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_is_enabled
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_stop
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_generate_random_addr
</UL>

<P><STRONG><a name="[6d]"></a>nrf_drv_spi_init</STRONG> (Thumb, 368 bytes, Stack size 56 bytes, nrf_drv_spi.o(i.nrf_drv_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_int_enable
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BT_work_mode
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_evt_handler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSensor
</UL>

<P><STRONG><a name="[252]"></a>nrf_drv_spi_transfer</STRONG> (Thumb, 36 bytes, Stack size 56 bytes, nrf_drv_spi.o(i.nrf_drv_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReg
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg
</UL>

<P><STRONG><a name="[69]"></a>nrf_drv_spi_uninit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.nrf_drv_spi_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_spi_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSensor
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOn
</UL>

<P><STRONG><a name="[253]"></a>nrf_drv_spi_xfer</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, nrf_drv_spi.o(i.nrf_drv_spi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
</UL>

<P><STRONG><a name="[256]"></a>nrf_drv_timer_compare</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nrf_drv_timer.o(i.nrf_drv_timer_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_timer_compare
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_int_enable
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_int_disable
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_int_get
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_extended_compare
</UL>

<P><STRONG><a name="[228]"></a>nrf_drv_timer_disable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_drv_timer.o(i.nrf_drv_timer_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_timer_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>nrf_drv_timer_enable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_drv_timer.o(i.nrf_drv_timer_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_timer_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_event_handler
</UL>

<P><STRONG><a name="[225]"></a>nrf_drv_timer_extended_compare</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nrf_drv_timer.o(i.nrf_drv_timer_extended_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_timer_extended_compare &rArr; nrf_drv_timer_compare
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_shorts_disable
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[224]"></a>nrf_drv_timer_init</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, nrf_drv_timer.o(i.nrf_drv_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_drv_timer_init &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_get_IRQn
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25c]"></a>nrf_esb_disable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_fifos
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[38]"></a>nrf_esb_event_handler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(i.nrf_esb_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_esb_event_handler &rArr; nrf_esb_read_rx_payload
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_read_rx_payload
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_flush_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.esb_init)
</UL>
<P><STRONG><a name="[25e]"></a>nrf_esb_flush_tx</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_flush_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_flush_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_event_handler
</UL>

<P><STRONG><a name="[172]"></a>nrf_esb_init</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, nrf_esb.o(i.nrf_esb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_esb_init &rArr; nrf_esb_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_parameters
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timer_init
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppi_init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_fifos
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
</UL>

<P><STRONG><a name="[25f]"></a>nrf_esb_read_rx_payload</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_read_rx_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_read_rx_payload
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_event_handler
</UL>

<P><STRONG><a name="[173]"></a>nrf_esb_set_address_length</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_set_address_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_set_address_length
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
</UL>

<P><STRONG><a name="[174]"></a>nrf_esb_set_base_address_0</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_set_base_address_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_esb_set_base_address_0 &rArr; update_radio_addresses &rArr; addr_conv
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_addresses
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_base_address_0_encrypt
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_base_address_0
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
</UL>

<P><STRONG><a name="[169]"></a>nrf_esb_set_rf_channel</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nrf_esb.o(i.nrf_esb_set_rf_channel))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_rf_channel_switch
</UL>

<P><STRONG><a name="[176]"></a>nrf_esb_set_tx_power</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_set_tx_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_set_tx_power
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_tx_power
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
</UL>

<P><STRONG><a name="[220]"></a>nrf_esb_start_rx</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_start_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_start_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[222]"></a>nrf_esb_stop_rx</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, nrf_esb.o(i.nrf_esb_stop_rx))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[175]"></a>nrf_esb_update_prefix</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_esb.o(i.nrf_esb_update_prefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_esb_update_prefix &rArr; update_radio_addresses &rArr; addr_conv
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_addresses
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
</UL>

<P><STRONG><a name="[21f]"></a>nrf_esb_write_payload</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_write_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_esb_write_payload &rArr; start_tx_transaction
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[277]"></a>nrf_log_backend_hexdump_handler_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_hexdump_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[272]"></a>nrf_log_backend_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_init))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_blocking_backend_set
</UL>

<P><STRONG><a name="[278]"></a>nrf_log_backend_std_handler_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_std_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[c4]"></a>nrf_log_blocking_backend_set</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_log_blocking_backend_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_log_blocking_backend_set
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[c5]"></a>nrf_log_frontend_dequeue</STRONG> (Thumb, 506 bytes, Stack size 88 bytes, nrf_log_frontend.o(i.nrf_log_frontend_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_log_frontend_dequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[274]"></a>nrf_log_frontend_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_frontend_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_frontend_init
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_handlers_set
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[c3]"></a>nrf_log_frontend_std_0</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[276]"></a>nrf_log_frontend_std_1</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_log_frontend_std_1 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable
</UL>

<P><STRONG><a name="[275]"></a>nrf_log_handlers_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_handlers_set))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_init
</UL>

<P><STRONG><a name="[210]"></a>nrf_log_init</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.nrf_log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_log_init &rArr; nrf_log_frontend_init
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_std_handler_get
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_hexdump_handler_get
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_init
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>nrf_queue_is_full</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_queue.o(i.nrf_queue_is_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_queue_is_full
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_next_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_IRQHandler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
</UL>

<P><STRONG><a name="[82]"></a>nrf_queue_push</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, nrf_queue.o(i.nrf_queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_queue_push &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_full
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_utilization_get
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_next_idx
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_IRQHandler
</UL>

<P><STRONG><a name="[24b]"></a>nrf_queue_read</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, nrf_queue.o(i.nrf_queue_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_queue_read &rArr; queue_read
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_utilization_get
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_read
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_rand
</UL>

<P><STRONG><a name="[24d]"></a>nrf_queue_reset</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_queue.o(i.nrf_queue_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_queue_reset &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_uninit
</UL>

<P><STRONG><a name="[246]"></a>nrf_queue_utilization_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_queue.o(i.nrf_queue_utilization_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_queue_utilization_get &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_utilization_get
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_bytes_available
</UL>

<P><STRONG><a name="[291]"></a>pdb_init</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, peer_database.o(i.pdb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pdb_init &rArr; pm_buffer_init &rArr; pm_mutex_init
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_state_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[293]"></a>pdb_next_deleted_peer_id_get</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_database.o(i.pdb_next_deleted_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pdb_next_deleted_peer_id_get &rArr; pds_next_deleted_peer_id_get &rArr; peer_id_get_next_deleted &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_deleted_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
</UL>

<P><STRONG><a name="[1d4]"></a>pdb_next_peer_id_get</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_database.o(i.pdb_next_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pdb_next_peer_id_get &rArr; pds_next_peer_id_get &rArr; peer_id_get_next_used &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_database_has_changed
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_next_peer_id_get
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
</UL>

<P><STRONG><a name="[50]"></a>pdb_pds_evt_handler</STRONG> (Thumb, 434 bytes, Stack size 40 bytes, peer_database.o(i.pdb_pds_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = pdb_pds_evt_handler &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_data_storage.o(.constdata)
</UL>
<P><STRONG><a name="[207]"></a>pdb_peer_allocate</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, peer_database.o(i.pdb_peer_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pdb_peer_allocate &rArr; pds_peer_id_allocate &rArr; peer_id_allocate &rArr; claim &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_new_peer
</UL>

<P><STRONG><a name="[29a]"></a>pdb_peer_data_load</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, peer_database.o(i.pdb_peer_data_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pdb_peer_data_load &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_data_load
</UL>

<P><STRONG><a name="[1d7]"></a>pdb_peer_data_ptr_get</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, peer_database.o(i.pdb_peer_data_ptr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_pdb_evt_handler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_pdb_evt_handler
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
</UL>

<P><STRONG><a name="[1ec]"></a>pdb_peer_free</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, peer_database.o(i.pdb_peer_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_next
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
</UL>

<P><STRONG><a name="[1d1]"></a>pdb_raw_store</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, peer_database.o(i.pdb_raw_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
</UL>

<P><STRONG><a name="[1d9]"></a>pdb_write_buf_get</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, peer_database.o(i.pdb_write_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pdb_write_buf_get &rArr; pm_buffer_block_acquire &rArr; pm_mutex_lock &rArr; lock_by_mask &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_invalidate
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_get
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_point_to_buffer
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_is_allocated
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_new_peer
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
</UL>

<P><STRONG><a name="[1da]"></a>pdb_write_buf_release</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, peer_database.o(i.pdb_write_buf_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pdb_write_buf_release &rArr; write_buffer_record_release &rArr; pm_buffer_release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_new_peer
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
</UL>

<P><STRONG><a name="[e4]"></a>pdb_write_buf_store</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, peer_database.o(i.pdb_write_buf_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_length_words_set
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_const_point_to_buffer
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[206]"></a>pdb_write_buf_store_prepare</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, peer_database.o(i.pdb_write_buf_store_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pdb_write_buf_store_prepare &rArr; pds_space_reserve &rArr; fds_reserve &rArr; write_space_reserve
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_length_words_set
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_const_point_to_buffer
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_new_peer
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
</UL>

<P><STRONG><a name="[2a9]"></a>pds_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pds_init &rArr; fds_init &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_register
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_load
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[294]"></a>pds_next_deleted_peer_id_get</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_next_deleted_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pds_next_deleted_peer_id_get &rArr; peer_id_get_next_deleted &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_deleted_peer_id_get
</UL>

<P><STRONG><a name="[295]"></a>pds_next_peer_id_get</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_next_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pds_next_peer_id_get &rArr; peer_id_get_next_used &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_used
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
</UL>

<P><STRONG><a name="[1e1]"></a>pds_peer_data_iterate</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, peer_data_storage.o(i.pds_peer_data_iterate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pds_peer_data_iterate &rArr; fds_record_find_by_key &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_to_record_key
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_id_to_peer_id
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_pdb_evt_handler
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[1e0]"></a>pds_peer_data_iterate_prepare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peer_data_storage.o(i.pds_peer_data_iterate_prepare))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_pdb_evt_handler
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[29b]"></a>pds_peer_data_read</STRONG> (Thumb, 144 bytes, Stack size 64 bytes, peer_data_storage.o(i.pds_peer_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peers_id_keys_get
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_load
</UL>

<P><STRONG><a name="[29e]"></a>pds_peer_data_store</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, peer_data_storage.o(i.pds_peer_data_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve_cancel
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write_reserved
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_update
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_id_from_desc
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_to_file_id
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_to_record_key
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_raw_store
</UL>

<P><STRONG><a name="[299]"></a>pds_peer_id_allocate</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_peer_id_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pds_peer_id_allocate &rArr; peer_id_allocate &rArr; claim &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_allocate
</UL>

<P><STRONG><a name="[29d]"></a>pds_peer_id_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_peer_id_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_delete
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
</UL>

<P><STRONG><a name="[29f]"></a>pds_peer_id_is_allocated</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_peer_id_is_allocated))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pds_peer_id_is_allocated &rArr; peer_id_is_allocated &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_allocated
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[2a8]"></a>pds_space_reserve</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, peer_data_storage.o(i.pds_space_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pds_space_reserve &rArr; fds_reserve &rArr; write_space_reserve
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
</UL>

<P><STRONG><a name="[2a5]"></a>pds_space_reserve_cancel</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, peer_data_storage.o(i.pds_space_reserve_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pds_space_reserve_cancel &rArr; fds_reserve_cancel &rArr; write_space_free
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
</UL>

<P><STRONG><a name="[2b4]"></a>peer_id_allocate</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = peer_id_allocate &rArr; claim &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_allocate
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_load
</UL>

<P><STRONG><a name="[2b5]"></a>peer_id_delete</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, peer_id.o(i.peer_id_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = peer_id_delete &rArr; claim &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
</UL>

<P><STRONG><a name="[17f]"></a>peer_id_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = peer_id_free &rArr; release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[2ad]"></a>peer_id_get_next_deleted</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_get_next_deleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = peer_id_get_next_deleted &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_deleted_peer_id_get
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
</UL>

<P><STRONG><a name="[2ae]"></a>peer_id_get_next_used</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_get_next_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = peer_id_get_next_used &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_deleted
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
</UL>

<P><STRONG><a name="[2ab]"></a>peer_id_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = peer_id_init &rArr; pm_mutex_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_state_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[2b6]"></a>peer_id_is_allocated</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_is_allocated))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_id_is_allocated &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_is_allocated
</UL>

<P><STRONG><a name="[2b8]"></a>peer_id_is_deleted</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_is_deleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_id_is_deleted &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_used
</UL>

<P><STRONG><a name="[2a2]"></a>pm_buffer_block_acquire</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, pm_buffer.o(i.pm_buffer_block_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pm_buffer_block_acquire &rArr; pm_mutex_lock &rArr; lock_by_mask &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[292]"></a>pm_buffer_init</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, pm_buffer.o(i.pm_buffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pm_buffer_init &rArr; pm_mutex_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_init
</UL>

<P><STRONG><a name="[2a3]"></a>pm_buffer_ptr_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pm_buffer.o(i.pm_buffer_ptr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_buffer_ptr_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
</UL>

<P><STRONG><a name="[2a0]"></a>pm_buffer_release</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pm_buffer.o(i.pm_buffer_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pm_buffer_release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
</UL>

<P><STRONG><a name="[2be]"></a>pm_conn_sec_config_reply</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, peer_manager.o(i.pm_conn_sec_config_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = pm_conn_sec_config_reply &rArr; sm_conn_sec_config_reply &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_conn_sec_config_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
</UL>

<P><STRONG><a name="[b5]"></a>pm_device_identities_list_set</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, peer_manager.o(i.pm_device_identities_list_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pm_device_identities_list_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_device_identities_list_set
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
</UL>

<P><STRONG><a name="[0]"></a>pm_gcm_evt_handler</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, peer_manager.o(i.pm_gcm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pm_gcm_evt_handler &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>pm_im_evt_handler</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, peer_manager.o(i.pm_im_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = pm_im_evt_handler &rArr; pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_delete
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_manager.o(.constdata)
</UL>
<P><STRONG><a name="[2ba]"></a>pm_init</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, peer_manager.o(i.pm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = pm_init &rArr; pds_init &rArr; fds_init &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_state_reset
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_init
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_init
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
</UL>

<P><STRONG><a name="[2c2]"></a>pm_local_database_has_changed</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, peer_manager.o(i.pm_local_database_has_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = pm_local_database_has_changed &rArr; gcm_local_database_has_changed &rArr; service_changed_pending_flags_check &rArr; service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
</UL>

<P><STRONG><a name="[2b9]"></a>pm_mutex_init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pm_mutex.o(i.pm_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pm_mutex_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_init
</UL>

<P><STRONG><a name="[155]"></a>pm_mutex_lock</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pm_mutex.o(i.pm_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pm_mutex_lock &rArr; lock_by_mask &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_by_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
</UL>

<P><STRONG><a name="[154]"></a>pm_mutex_lock_first_available</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, pm_mutex.o(i.pm_mutex_lock_first_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_by_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
</UL>

<P><STRONG><a name="[233]"></a>pm_mutex_lock_status_get</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pm_mutex.o(i.pm_mutex_lock_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_deleted
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_id_get
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_allocated
</UL>

<P><STRONG><a name="[2bd]"></a>pm_mutex_unlock</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, pm_mutex.o(i.pm_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pm_mutex_unlock &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
</UL>

<P><STRONG><a name="[219]"></a>pm_next_peer_id_get</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, peer_manager.o(i.pm_next_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pm_next_peer_id_get &rArr; pdb_next_peer_id_get &rArr; pds_next_peer_id_get &rArr; peer_id_get_next_used &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_list_get
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
</UL>

<P><STRONG><a name="[119]"></a>pm_on_ble_evt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, peer_manager.o(i.pm_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = pm_on_ble_evt &rArr; sm_ble_evt_handler &rArr; link_secure_pending_process &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[51]"></a>pm_pdb_evt_handler</STRONG> (Thumb, 430 bytes, Stack size 56 bytes, peer_manager.o(i.pm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pm_pdb_evt_handler &rArr; pdb_next_peer_id_get &rArr; pds_next_peer_id_get &rArr; peer_id_get_next_used &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_deleted_peer_id_get
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[27d]"></a>pm_peer_data_bonding_load</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, peer_manager.o(i.pm_peer_data_bonding_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = pm_peer_data_bonding_load &rArr; pm_peer_data_load &rArr; pdb_peer_data_load &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_data_load
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
</UL>

<P><STRONG><a name="[2c8]"></a>pm_peer_data_load</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, peer_manager.o(i.pm_peer_data_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pm_peer_data_load &rArr; pdb_peer_data_load &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_load
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_data_bonding_load
</UL>

<P><STRONG><a name="[2c1]"></a>pm_peer_delete</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, peer_manager.o(i.pm_peer_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_im_evt_handler
</UL>

<P><STRONG><a name="[21b]"></a>pm_peers_delete</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, peer_manager.o(i.pm_peers_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pm_peers_delete &rArr; pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_delete
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
</UL>

<P><STRONG><a name="[2bc]"></a>pm_register</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, peer_manager.o(i.pm_register))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
</UL>

<P><STRONG><a name="[2bb]"></a>pm_sec_params_set</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, peer_manager.o(i.pm_sec_params_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_sec_params_set &rArr; sm_sec_params_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_sec_params_set
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
</UL>

<P><STRONG><a name="[58]"></a>pm_sm_evt_handler</STRONG> (Thumb, 422 bytes, Stack size 48 bytes, peer_manager.o(i.pm_sm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = pm_sm_evt_handler &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> security_manager.o(.constdata)
</UL>
<P><STRONG><a name="[27c]"></a>pm_whitelist_get</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, peer_manager.o(i.pm_whitelist_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = pm_whitelist_get &rArr; im_whitelist_get &rArr; peers_id_keys_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_whitelist_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
</UL>

<P><STRONG><a name="[b4]"></a>pm_whitelist_set</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, peer_manager.o(i.pm_whitelist_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pm_whitelist_set &rArr; im_whitelist_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_whitelist_set
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
</UL>

<P><STRONG><a name="[213]"></a>radio_tx_carrier</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main.o(i.radio_tx_carrier))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = radio_tx_carrier
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>readReg</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, motion_sensor.o(i.readReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = readReg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_sensor_two_spi_send_byte
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_sensor_two_spi_read_byte
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyProductId
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChenkSensorSync
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrPaw3205setCPI
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMotion
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterOrExitSleepmode
</UL>

<P><STRONG><a name="[2d8]"></a>sdk_mapped_flags_bulk_update_by_key</STRONG> (Thumb, 98 bytes, Stack size 36 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_bulk_update_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_invalidate
</UL>

<P><STRONG><a name="[2d2]"></a>sdk_mapped_flags_first_key_index_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_first_key_index_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdk_mapped_flags_first_key_index_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_activate
</UL>

<P><STRONG><a name="[10b]"></a>sdk_mapped_flags_get_by_key</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_get_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_mitm_protected
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
</UL>

<P><STRONG><a name="[109]"></a>sdk_mapped_flags_key_list_get</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_key_list_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sdk_mapped_flags_key_list_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_index
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
</UL>

<P><STRONG><a name="[110]"></a>sdk_mapped_flags_update_by_key</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_update_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_set_disconnected
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_activate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
</UL>

<P><STRONG><a name="[2e8]"></a>set_BT_work_mode</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, main.o(i.set_BT_work_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = set_BT_work_mode &rArr; enterOrExitSleepmode &rArr; writeReg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_word_write
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterOrExitSleepmode
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_encrypt_information
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_led_event_handler
</UL>

<P><STRONG><a name="[21a]"></a>set_generate_random_addr</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, main.o(i.set_generate_random_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = set_generate_random_addr &rArr; random_vector_generate &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_vector_generate
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_uninit
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
</UL>

<P><STRONG><a name="[4a]"></a>sleep_timeout_handler</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, main.o(i.sleep_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sleep_timeout_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_qdec_uninit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.timers_init)
</UL>
<P><STRONG><a name="[2c7]"></a>sm_ble_evt_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, security_manager.o(i.sm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = sm_ble_evt_handler &rArr; link_secure_pending_process &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_on_ble_evt
</UL>

<P><STRONG><a name="[2bf]"></a>sm_conn_sec_config_reply</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, security_manager.o(i.sm_conn_sec_config_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = sm_conn_sec_config_reply &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_sec_config_reply
</UL>

<P><STRONG><a name="[2c4]"></a>sm_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, security_manager.o(i.sm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sm_init &rArr; flag_id_init &rArr; ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[53]"></a>sm_pdb_evt_handler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, security_manager.o(i.sm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = sm_pdb_evt_handler &rArr; link_secure_pending_process &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[2c9]"></a>sm_sec_params_set</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, security_manager.o(i.sm_sec_params_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sm_sec_params_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_params_verify
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sec_params_set
</UL>

<P><STRONG><a name="[56]"></a>sm_smd_evt_handler</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, security_manager.o(i.sm_smd_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = sm_smd_evt_handler &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> security_dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[2ea]"></a>smd_ble_evt_handler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, security_dispatcher.o(i.smd_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = smd_ble_evt_handler &rArr; auth_status_process &rArr; auth_status_success_process &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_request_process
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_params_request_process
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_process
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_process
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
</UL>

<P><STRONG><a name="[2c5]"></a>smd_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, security_dispatcher.o(i.smd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smd_init &rArr; flag_id_init &rArr; ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[200]"></a>smd_link_secure</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, security_dispatcher.o(i.smd_link_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_peripheral
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[2ed]"></a>smd_params_reply</STRONG> (Thumb, 290 bytes, Stack size 88 bytes, security_dispatcher.o(i.smd_params_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = smd_params_reply &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_allocate
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_addr_get
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_start_send
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
</UL>

<P><STRONG><a name="[54]"></a>smd_pdb_evt_handler</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, security_dispatcher.o(i.smd_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = smd_pdb_evt_handler &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[135]"></a>softdevice_ble_evt_handler_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_ble_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[134]"></a>softdevice_enable</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, softdevice_handler.o(i.softdevice_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = softdevice_enable &rArr; nrf_log_frontend_std_1 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_end_address_get
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[133]"></a>softdevice_enable_get_default_config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, softdevice_handler.o(i.softdevice_enable_get_default_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = softdevice_enable_get_default_config
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[45]"></a>softdevice_evt_get</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, softdevice_handler_appsh.o(i.softdevice_evt_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = softdevice_evt_get &rArr; intern_softdevice_events_execute &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softdevice_handler_appsh.o(i.softdevice_evt_schedule)
</UL>
<P><STRONG><a name="[2f]"></a>softdevice_evt_schedule</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, softdevice_handler_appsh.o(i.softdevice_evt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = softdevice_evt_schedule &rArr; app_sched_event_put &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[46]"></a>softdevice_fault_handler</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, softdevice_handler.o(i.softdevice_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = softdevice_fault_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softdevice_handler.o(i.softdevice_handler_init)
</UL>
<P><STRONG><a name="[132]"></a>softdevice_handler_init</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, softdevice_handler.o(i.softdevice_handler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = softdevice_handler_init &rArr; nrf_drv_clock_on_sd_enable &rArr; nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable_check
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[81]"></a>softdevice_handler_is_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_handler_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_uninit
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_rand
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_bytes_available
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_IRQHandler
</UL>

<P><STRONG><a name="[136]"></a>softdevice_sys_evt_handler_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_sys_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[26]"></a>spi_event_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.spi_event_handler))
<BR>[Address Reference Count : 8]<UL><LI> main.o(i.bsp_event_handler)
<LI> main.o(i.fs_evt_handler)
<LI> main.o(i.main)
<LI> main.o(i.motion_timeout_handler)
<LI> main.o(i.on_adv_evt)
<LI> main.o(i.pm_evt_handler)
<LI> main.o(i.set_BT_work_mode)
<LI> motion_sensor.o(i.CheckSensor)
</UL>
<P><STRONG><a name="[22a]"></a>system_off</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.system_off))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b]"></a>timer_led_event_handler</STRONG> (Thumb, 518 bytes, Stack size 16 bytes, main.o(i.timer_led_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = timer_led_event_handler &rArr; set_BT_work_mode &rArr; enterOrExitSleepmode &rArr; writeReg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BT_work_mode
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_sample
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[217]"></a>turnOn</STRONG> (Thumb, 514 bytes, Stack size 8 bytes, motion_sensor.o(i.turnOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = turnOn &rArr; verifyProductId &rArr; readReg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReg
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyProductId
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>usrPaw3205ReSynchronousSPI</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, motion_sensor.o(i.usrPaw3205ReSynchronousSPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = usrPaw3205ReSynchronousSPI &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSensor
</UL>

<P><STRONG><a name="[147]"></a>usrPaw3205setCPI</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, motion_sensor.o(i.usrPaw3205setCPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = usrPaw3205setCPI &rArr; writeReg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReg
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
</UL>

<P><STRONG><a name="[2f9]"></a>verifyProductId</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, motion_sensor.o(i.verifyProductId))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = verifyProductId &rArr; readReg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOn
</UL>

<P><STRONG><a name="[170]"></a>writeReg</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, motion_sensor.o(i.writeReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = writeReg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_sensor_two_spi_send_byte
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrPaw3205setCPI
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOn
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterOrExitSleepmode
</UL>

<P><STRONG><a name="[223]"></a>write_encrypt_information</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, main.o(i.write_encrypt_information))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = write_encrypt_information &rArr; set_BT_work_mode &rArr; enterOrExitSleepmode &rArr; writeReg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BT_work_mode
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_word_write
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1a9]"></a>NVIC_SystemReset</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BT_work_mode
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_evt_handler
</UL>

<P><STRONG><a name="[94]"></a>adc_config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(i.adc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = adc_config &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_channel_enable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_led_event_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
</UL>

<P><STRONG><a name="[28]"></a>adc_event_handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, main.o(i.adc_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = adc_event_handler &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_uninit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.adc_config)
</UL>
<P><STRONG><a name="[af]"></a>advertising_init</STRONG> (Thumb, 128 bytes, Stack size 112 bytes, main.o(i.advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>advertising_start</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, main.o(i.advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = advertising_start &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_list_get
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_whitelist_set
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_device_identities_list_set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
</UL>

<P><STRONG><a name="[e7]"></a>bas_init</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, main.o(i.bas_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = bas_init &rArr; ble_bas_init &rArr; battery_level_char_add &rArr; ble_srv_report_ref_encode &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[29]"></a>ble_advertising_error_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.ble_advertising_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ble_advertising_error_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.advertising_init)
</UL>
<P><STRONG><a name="[30]"></a>ble_evt_dispatch</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(i.ble_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = ble_evt_dispatch &rArr; pm_on_ble_evt &rArr; sm_ble_evt_handler &rArr; link_secure_pending_process &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_on_ble_evt
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_on_ble_evt
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_on_ble_evt
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_on_ble_evt
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[131]"></a>ble_stack_init</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, main.o(i.ble_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ble_stack_init &rArr; softdevice_enable &rArr; nrf_log_frontend_std_1 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_sys_evt_handler_set
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable_get_default_config
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_ble_evt_handler_set
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36]"></a>bsp_event_handler</STRONG> (Thumb, 1308 bytes, Stack size 40 bytes, main.o(i.bsp_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = bsp_event_handler &rArr; advertising_start &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flash_write
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_qdec_reportper_to_value
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouse_key_send
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrPaw3205setCPI
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_qdec_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_qdec_enable
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterOrExitSleepmode
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.buttons_leds_init)
</UL>
<P><STRONG><a name="[151]"></a>buttons_leds_init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, main.o(i.buttons_leds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = buttons_leds_init &rArr; bsp_init &rArr; app_button_init &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37]"></a>conn_params_error_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.conn_params_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = conn_params_error_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.conn_params_init)
</UL>
<P><STRONG><a name="[15e]"></a>conn_params_init</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, main.o(i.conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = conn_params_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[166]"></a>dis_init</STRONG> (Thumb, 132 bytes, Stack size 88 bytes, main.o(i.dis_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = dis_init &rArr; ble_dis_init &rArr; char_add &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_ascii_to_utf8
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[21d]"></a>flash_page_erase</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, main.o(i.flash_page_erase))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_encrypt_information
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BT_work_mode
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[227]"></a>flash_word_write</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, main.o(i.flash_word_write))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_encrypt_information
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BT_work_mode
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2]"></a>fs_evt_handler</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, main.o(i.fs_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = fs_evt_handler &rArr; enterOrExitSleepmode &rArr; writeReg &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flash_write
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterOrExitSleepmode
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(fs_data)
</UL>
<P><STRONG><a name="[1b0]"></a>gap_params_init</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, main.o(i.gap_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gap_params_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1dc]"></a>hids_init</STRONG> (Thumb, 1096 bytes, Stack size 152 bytes, main.o(i.hids_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = hids_init &rArr; ble_hids_init &rArr; inp_rep_characteristics_add &rArr; rep_char_add &rArr; ble_srv_report_ref_encode &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[49]"></a>motion_timeout_handler</STRONG> (Thumb, 1644 bytes, Stack size 48 bytes, main.o(i.motion_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = motion_timeout_handler &rArr; ble_advertising_restart_without_whitelist &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_generate_random_addr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flash_write
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flash_read
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_of_page
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouse_movement_send
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouse_key_send
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouse_Authorization_send
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_whitelist_set
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_next_peer_id_get
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_device_identities_list_set
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_qdec_uninit
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_sample
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMotion
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterOrExitSleepmode
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_restart_without_whitelist
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.timers_init)
</UL>
<P><STRONG><a name="[22f]"></a>mouse_Authorization_send</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.mouse_Authorization_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mouse_Authorization_send &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_inp_rep_send
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
</UL>

<P><STRONG><a name="[149]"></a>mouse_key_send</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, main.o(i.mouse_key_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mouse_key_send &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_inp_rep_send
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
</UL>

<P><STRONG><a name="[22c]"></a>mouse_movement_send</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, main.o(i.mouse_movement_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mouse_movement_send &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_inp_rep_send
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_boot_mouse_inp_rep_send
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
</UL>

<P><STRONG><a name="[231]"></a>mouse_scroll_send</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, main.o(i.mouse_scroll_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mouse_scroll_send &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_inp_rep_send
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdec_event_handler
</UL>

<P><STRONG><a name="[1a8]"></a>nrf_delay_ms</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_encrypt_information
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BT_work_mode
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_evt_handler
</UL>

<P><STRONG><a name="[221]"></a>nrf_delay_us</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, main.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>

<P><STRONG><a name="[211]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, main.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_timeout_handler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
</UL>

<P><STRONG><a name="[212]"></a>nrf_gpio_ports_read</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, main.o(i.nrf_gpio_ports_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_ports_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_led_event_handler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_timeout_handler
</UL>

<P><STRONG><a name="[143]"></a>nrf_qdec_reportper_to_value</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.nrf_qdec_reportper_to_value))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
</UL>

<P><STRONG><a name="[2a]"></a>on_adv_evt</STRONG> (Thumb, 780 bytes, Stack size 216 bytes, main.o(i.on_adv_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = on_adv_evt &rArr; pm_whitelist_get &rArr; im_whitelist_get &rArr; peers_id_keys_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_whitelist_get
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_data_bonding_load
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_qdec_uninit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_uninit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterOrExitSleepmode
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_whitelist_reply
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_restart_without_whitelist
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_peer_addr_reply
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.advertising_init)
</UL>
<P><STRONG><a name="[11b]"></a>on_ble_evt</STRONG> (Thumb, 374 bytes, Stack size 48 bytes, main.o(i.on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = on_ble_evt &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[39]"></a>on_hids_evt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, main.o(i.on_hids_evt))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.hids_init)
</UL>
<P><STRONG><a name="[b3]"></a>peer_list_get</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, main.o(i.peer_list_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = peer_list_get &rArr; pm_next_peer_id_get &rArr; pdb_next_peer_id_get &rArr; pds_next_peer_id_get &rArr; peer_id_get_next_used &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_next_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
</UL>

<P><STRONG><a name="[218]"></a>peer_manager_init</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, main.o(i.peer_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = peer_manager_init &rArr; pm_peers_delete &rArr; pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sec_params_set
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_register
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>pm_evt_handler</STRONG> (Thumb, 754 bytes, Stack size 32 bytes, main.o(i.pm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = pm_evt_handler &rArr; pm_local_database_has_changed &rArr; gcm_local_database_has_changed &rArr; service_changed_pending_flags_check &rArr; service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flash_write
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flash_read
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_of_page
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_whitelist_set
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_delete
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_local_database_has_changed
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_device_identities_list_set
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_sec_config_reply
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterOrExitSleepmode
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.peer_manager_init)
</UL>
<P><STRONG><a name="[21c]"></a>power_manage</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(i.power_manage))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = power_manage &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>qdec_event_handler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, main.o(i.qdec_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = qdec_event_handler &rArr; mouse_scroll_send &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouse_scroll_send
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.bsp_event_handler)
<LI> main.o(i.main)
</UL>
<P><STRONG><a name="[2d0]"></a>radio_disable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, main.o(i.radio_disable))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_tx_carrier
</UL>

<P><STRONG><a name="[2d1]"></a>random_vector_generate</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, main.o(i.random_vector_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = random_vector_generate &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_rand
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_bytes_available
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_generate_random_addr
</UL>

<P><STRONG><a name="[215]"></a>scheduler_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(i.scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = scheduler_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>service_error_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.service_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = service_error_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.hids_init)
</UL>
<P><STRONG><a name="[216]"></a>services_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.services_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = services_init &rArr; hids_init &rArr; ble_hids_init &rArr; inp_rep_characteristics_add &rArr; rep_char_add &rArr; ble_srv_report_ref_encode &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bas_init
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31]"></a>sys_evt_dispatch</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.sys_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = sys_evt_dispatch &rArr; ble_advertising_on_sys_evt &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_sys_event_handler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_sys_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[214]"></a>timers_init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, main.o(i.timers_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = timers_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>nrf_delay_ms</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, motion_sensor.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomSensorReSynchronousSPI
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrPaw3205ReSynchronousSPI
</UL>

<P><STRONG><a name="[72]"></a>nrf_delay_us</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, motion_sensor.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomSensorReSynchronousSPI
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrPaw3205ReSynchronousSPI
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOn
</UL>

<P><STRONG><a name="[269]"></a>nrf_gpio_cfg</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, motion_sensor.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[16b]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, motion_sensor.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_sensor_two_spi_send_byte
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_sensor_two_spi_read_byte
</UL>

<P><STRONG><a name="[70]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, motion_sensor.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_sensor_two_spi_send_byte
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_sensor_two_spi_read_byte
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomSensorReSynchronousSPI
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrPaw3205ReSynchronousSPI
</UL>

<P><STRONG><a name="[16c]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, motion_sensor.o(i.nrf_gpio_pin_read))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_sensor_two_spi_read_byte
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMotion
</UL>

<P><STRONG><a name="[71]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, motion_sensor.o(i.nrf_gpio_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_sensor_two_spi_send_byte
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_sensor_two_spi_read_byte
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomSensorReSynchronousSPI
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrPaw3205ReSynchronousSPI
</UL>

<P><STRONG><a name="[139]"></a>nrf_gpio_cfg</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, boards.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
</UL>

<P><STRONG><a name="[137]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, boards.o(i.nrf_gpio_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>

<P><STRONG><a name="[35]"></a>alert_timer_handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp.o(i.alert_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = alert_timer_handler &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.bsp_init)
</UL>
<P><STRONG><a name="[4d]"></a>bsp_button_event_handler</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, bsp.o(i.bsp_button_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bsp_button_event_handler &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_pin_to_button_idx
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_timer_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>bsp_led_indication</STRONG> (Thumb, 682 bytes, Stack size 24 bytes, bsp.o(i.bsp_led_indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_on
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_state_get
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_timer_handler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
</UL>

<P><STRONG><a name="[33]"></a>button_timer_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp.o(i.button_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = button_timer_handler &rArr; bsp_button_event_handler &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.bsp_init)
</UL>
<P><STRONG><a name="[34]"></a>leds_timer_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp.o(i.leds_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = leds_timer_handler &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.bsp_init)
</UL>
<P><STRONG><a name="[ad]"></a>advertising_buttons_configure</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.advertising_buttons_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = advertising_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_on_ble_evt
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_init
</UL>

<P><STRONG><a name="[13e]"></a>connection_buttons_configure</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.connection_buttons_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = connection_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_on_ble_evt
</UL>

<P><STRONG><a name="[13d]"></a>startup_event_extract</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.startup_event_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = startup_event_extract &rArr; bsp_button_is_pressed &rArr; bsp_board_button_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_is_pressed
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_init
</UL>

<P><STRONG><a name="[ec]"></a>advdata_check</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ble_advdata.o(i.advdata_check))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[a2]"></a>appearance_encode</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ble_advdata.o(i.appearance_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = appearance_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[a1]"></a>ble_device_addr_encode</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ble_advdata.o(i.ble_device_addr_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_device_addr_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[15d]"></a>conn_int_check</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, ble_advdata.o(i.conn_int_check))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>

<P><STRONG><a name="[a6]"></a>conn_int_encode</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, ble_advdata.o(i.conn_int_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_check
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[a3]"></a>flags_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_advdata.o(i.flags_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = flags_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[a7]"></a>manuf_specific_data_encode</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, ble_advdata.o(i.manuf_specific_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = manuf_specific_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[a9]"></a>name_encode</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, ble_advdata.o(i.name_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[a8]"></a>service_data_encode</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, ble_advdata.o(i.service_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = service_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[ed]"></a>srdata_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_advdata.o(i.srdata_check))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[a4]"></a>tx_power_level_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_advdata.o(i.tx_power_level_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tx_power_level_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[d5]"></a>uint16_encode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_advdata.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>

<P><STRONG><a name="[a5]"></a>uuid_list_encode</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[305]"></a>uuid_list_sized_encode</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[ab]"></a>addr_is_valid</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ble_advertising.o(i.addr_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_avail_get
</UL>

<P><STRONG><a name="[aa]"></a>adv_mode_next_avail_get</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ble_advertising.o(i.adv_mode_next_avail_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adv_mode_next_avail_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[ac]"></a>adv_mode_next_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_advertising.o(i.adv_mode_next_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = adv_mode_next_get &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timeout
</UL>

<P><STRONG><a name="[f5]"></a>flash_access_in_progress</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_advertising.o(i.flash_access_in_progress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_access_in_progress
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_queued_op_count_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[ef]"></a>on_connected</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_advertising.o(i.on_connected))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[f0]"></a>on_disconnected</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ble_advertising.o(i.on_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = on_disconnected &rArr; ble_advertising_restart_without_whitelist &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_restart_without_whitelist
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[f1]"></a>on_timeout</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ble_advertising.o(i.on_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = on_timeout &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_get
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[f6]"></a>set_adv_mode_directed</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_advertising.o(i.set_adv_mode_directed))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[f7]"></a>set_adv_mode_directed_slow</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ble_advertising.o(i.set_adv_mode_directed_slow))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[f8]"></a>set_adv_mode_fast</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ble_advertising.o(i.set_adv_mode_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = set_adv_mode_fast &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whitelist_has_entries
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[f9]"></a>set_adv_mode_slow</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ble_advertising.o(i.set_adv_mode_slow))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whitelist_has_entries
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[2e9]"></a>whitelist_has_entries</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_advertising.o(i.whitelist_has_entries))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
</UL>

<P><STRONG><a name="[15f]"></a>conn_params_negotiation</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ble_conn_params.o(i.conn_params_negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>

<P><STRONG><a name="[102]"></a>is_conn_params_ok</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ble_conn_params.o(i.is_conn_params_ok))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_change_conn_params
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[108]"></a>on_conn_params_update</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn_params.o(i.on_conn_params_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = on_conn_params_update &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[105]"></a>on_connect</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ble_conn_params.o(i.on_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = on_connect &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_change_conn_params
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[106]"></a>on_disconnect</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_conn_params.o(i.on_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = on_disconnect &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[107]"></a>on_write</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ble_conn_params.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[2e]"></a>update_timeout_handler</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ble_conn_params.o(i.update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_timeout_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P><STRONG><a name="[10f]"></a>record_activate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ble_conn_state.o(i.record_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = record_activate &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_first_key_index_get
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
</UL>

<P><STRONG><a name="[2d7]"></a>record_invalidate</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ble_conn_state.o(i.record_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = record_invalidate &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
</UL>

<P><STRONG><a name="[10e]"></a>record_purge_disconnected</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, ble_conn_state.o(i.record_purge_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = record_purge_disconnected &rArr; record_invalidate &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_invalidate
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
</UL>

<P><STRONG><a name="[111]"></a>record_set_disconnected</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn_state.o(i.record_set_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = record_set_disconnected &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
</UL>

<P><STRONG><a name="[114]"></a>user_flag_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_conn_state.o(i.user_flag_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>

<P><STRONG><a name="[113]"></a>user_flag_is_acquired</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_conn_state.o(i.user_flag_is_acquired))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>

<P><STRONG><a name="[130]"></a>uint16_decode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_srv_common.o(i.uint16_decode))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>

<P><STRONG><a name="[d6]"></a>apply_pending_flags_check</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, gatt_cache_manager.o(i.apply_pending_flags_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = apply_pending_flags_check &rArr; local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_any_set
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[1c4]"></a>cccd_written</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gatt_cache_manager.o(i.cccd_written))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[1c3]"></a>evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gatt_cache_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gscm_evt_handler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
</UL>

<P><STRONG><a name="[1cb]"></a>internal_state_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gatt_cache_manager.o(i.internal_state_reset))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
</UL>

<P><STRONG><a name="[dc]"></a>local_db_apply_in_evt</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, gatt_cache_manager.o(i.local_db_apply_in_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gscm_evt_handler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_pending_flags_check
</UL>

<P><STRONG><a name="[1c5]"></a>local_db_update_in_evt</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, gatt_cache_manager.o(i.local_db_update_in_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = local_db_update_in_evt &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_smd_evt_handler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
</UL>

<P><STRONG><a name="[d8]"></a>sdk_mapped_flags_any_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gatt_cache_manager.o(i.sdk_mapped_flags_any_set))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_pending_flags_check
</UL>

<P><STRONG><a name="[1c7]"></a>service_changed_pending_flags_check</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, gatt_cache_manager.o(i.service_changed_pending_flags_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = service_changed_pending_flags_check &rArr; service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_any_set
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gscm_evt_handler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[2e6]"></a>service_changed_send_in_evt</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, gatt_cache_manager.o(i.service_changed_send_in_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_send
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
</UL>

<P><STRONG><a name="[1c6]"></a>update_pending_flags_check</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, gatt_cache_manager.o(i.update_pending_flags_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = update_pending_flags_check &rArr; local_db_update_in_evt &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_any_set
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[1db]"></a>evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gatts_cache_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_pdb_evt_handler
</UL>

<P><STRONG><a name="[1d3]"></a>internal_state_reset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gatts_cache_manager.o(i.internal_state_reset))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_init
</UL>

<P><STRONG><a name="[1d5]"></a>service_changed_pending_set</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gatts_cache_manager.o(i.service_changed_pending_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = service_changed_pending_set &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_raw_store
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_pdb_evt_handler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_database_has_changed
</UL>

<P><STRONG><a name="[1e4]"></a>evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, id_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_pdb_evt_handler
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[1e6]"></a>internal_state_reset</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, id_manager.o(i.internal_state_reset))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_init
</UL>

<P><STRONG><a name="[1eb]"></a>peer_id_set</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, id_manager.o(i.peer_id_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = peer_id_set &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
</UL>

<P><STRONG><a name="[1ef]"></a>peers_id_keys_get</STRONG> (Thumb, 202 bytes, Stack size 144 bytes, id_manager.o(i.peers_id_keys_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = peers_id_keys_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_whitelist_get
</UL>

<P><STRONG><a name="[43]"></a>fds_evt_handler</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, peer_data_storage.o(i.fds_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = fds_evt_handler &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_key_within_pm_range
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_key_to_peer_data_id
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_evt_send
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_id_within_pm_range
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_id_to_peer_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_data_storage.o(i.pds_init)
</UL>
<P><STRONG><a name="[17c]"></a>file_id_to_peer_id</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, peer_data_storage.o(i.file_id_to_peer_id))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_load
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
</UL>

<P><STRONG><a name="[17a]"></a>file_id_within_pm_range</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, peer_data_storage.o(i.file_id_within_pm_range))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[17e]"></a>pds_evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, peer_data_storage.o(i.pds_evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pds_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[180]"></a>peer_data_delete</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, peer_data_storage.o(i.peer_data_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_in_file
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_to_file_id
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[2b1]"></a>peer_data_find</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, peer_data_storage.o(i.peer_data_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_to_file_id
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_to_record_key
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
</UL>

<P><STRONG><a name="[2b0]"></a>peer_data_id_is_valid</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, peer_data_storage.o(i.peer_data_id_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
</UL>

<P><STRONG><a name="[2af]"></a>peer_data_id_to_record_key</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, peer_data_storage.o(i.peer_data_id_to_record_key))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_load
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
</UL>

<P><STRONG><a name="[2b2]"></a>peer_id_to_file_id</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, peer_data_storage.o(i.peer_id_to_file_id))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
</UL>

<P><STRONG><a name="[2ac]"></a>peer_ids_load</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, peer_data_storage.o(i.peer_ids_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = peer_ids_load &rArr; peer_id_allocate &rArr; claim &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_to_record_key
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_id_to_peer_id
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[17d]"></a>record_key_to_peer_data_id</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, peer_data_storage.o(i.record_key_to_peer_data_id))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[17b]"></a>record_key_within_pm_range</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, peer_data_storage.o(i.record_key_within_pm_range))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[1f7]"></a>internal_state_reset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, peer_database.o(i.internal_state_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = internal_state_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_init
</UL>

<P><STRONG><a name="[298]"></a>pdb_evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, peer_database.o(i.pdb_evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pdb_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
</UL>

<P><STRONG><a name="[2a6]"></a>peer_data_const_point_to_buffer</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, peer_database.o(i.peer_data_const_point_to_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = peer_data_const_point_to_buffer &rArr; peer_data_point_to_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_point_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
</UL>

<P><STRONG><a name="[2a4]"></a>peer_data_point_to_buffer</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, peer_database.o(i.peer_data_point_to_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = peer_data_point_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_const_point_to_buffer
</UL>

<P><STRONG><a name="[2a7]"></a>write_buf_length_words_set</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, peer_database.o(i.write_buf_length_words_set))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
</UL>

<P><STRONG><a name="[296]"></a>write_buffer_record_find</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, peer_database.o(i.write_buffer_record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = write_buffer_record_find &rArr; write_buffer_record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_unused
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
</UL>

<P><STRONG><a name="[29c]"></a>write_buffer_record_find_next</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, peer_database.o(i.write_buffer_record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = write_buffer_record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
</UL>

<P><STRONG><a name="[306]"></a>write_buffer_record_find_unused</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_database.o(i.write_buffer_record_find_unused))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = write_buffer_record_find_unused &rArr; write_buffer_record_find &rArr; write_buffer_record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_get
</UL>

<P><STRONG><a name="[2a1]"></a>write_buffer_record_get</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, peer_database.o(i.write_buffer_record_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = write_buffer_record_get &rArr; write_buffer_record_find_unused &rArr; write_buffer_record_find &rArr; write_buffer_record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[1f8]"></a>write_buffer_record_invalidate</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, peer_database.o(i.write_buffer_record_invalidate))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_state_reset
</UL>

<P><STRONG><a name="[297]"></a>write_buffer_record_release</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, peer_database.o(i.write_buffer_record_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = write_buffer_record_release &rArr; pm_buffer_release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
</UL>

<P><STRONG><a name="[153]"></a>claim</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, peer_id.o(i.claim))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = claim &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_first_available
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_delete
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
</UL>

<P><STRONG><a name="[1f9]"></a>internal_state_reset</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, peer_id.o(i.internal_state_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = internal_state_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_init
</UL>

<P><STRONG><a name="[2b7]"></a>release</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, peer_id.o(i.release))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
</UL>

<P><STRONG><a name="[2c3]"></a>evt_send</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, peer_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_gcm_evt_handler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sm_evt_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_im_evt_handler
</UL>

<P><STRONG><a name="[2c6]"></a>internal_state_reset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, peer_manager.o(i.internal_state_reset))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[20f]"></a>lock_by_mask</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, pm_mutex.o(i.lock_by_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lock_by_mask &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_first_available
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock
</UL>

<P><STRONG><a name="[dd]"></a>auth_status_failure_process</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, security_dispatcher.o(i.auth_status_failure_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = auth_status_failure_process &rArr; link_secure_failure &rArr; pairing_failure &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_process
</UL>

<P><STRONG><a name="[df]"></a>auth_status_process</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, security_dispatcher.o(i.auth_status_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = auth_status_process &rArr; auth_status_success_process &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_failure_process
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[e0]"></a>auth_status_success_process</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, security_dispatcher.o(i.auth_status_success_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = auth_status_success_process &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_process
</UL>

<P><STRONG><a name="[160]"></a>conn_sec_update_process</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, security_dispatcher.o(i.conn_sec_update_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = conn_sec_update_process &rArr; encryption_failure &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_mitm_protected
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[167]"></a>disconnect_process</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, security_dispatcher.o(i.disconnect_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = disconnect_process &rArr; link_secure_failure &rArr; pairing_failure &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[161]"></a>encryption_failure</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, security_dispatcher.o(i.encryption_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = encryption_failure &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
</UL>

<P><STRONG><a name="[e5]"></a>evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, security_dispatcher.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_pdb_evt_handler
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_start_send
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_request_process
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_params_request_process
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[19f]"></a>flag_id_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, security_dispatcher.o(i.flag_id_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flag_id_init &rArr; ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_init
</UL>

<P><STRONG><a name="[201]"></a>link_secure_central</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, security_dispatcher.o(i.link_secure_central))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_start_send
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_new_peer
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
</UL>

<P><STRONG><a name="[202]"></a>link_secure_central_existing_peer</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, security_dispatcher.o(i.link_secure_central_existing_peer))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_id_is_valid
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
</UL>

<P><STRONG><a name="[203]"></a>link_secure_central_new_peer</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, security_dispatcher.o(i.link_secure_central_new_peer))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = link_secure_central_new_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_allocate
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
</UL>

<P><STRONG><a name="[de]"></a>link_secure_failure</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, security_dispatcher.o(i.link_secure_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = link_secure_failure &rArr; pairing_failure &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_process
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_failure_process
</UL>

<P><STRONG><a name="[2ec]"></a>link_secure_peripheral</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, security_dispatcher.o(i.link_secure_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = link_secure_peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
</UL>

<P><STRONG><a name="[208]"></a>pairing_failure</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, security_dispatcher.o(i.pairing_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = pairing_failure &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
</UL>

<P><STRONG><a name="[2e2]"></a>sec_info_request_process</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, security_dispatcher.o(i.sec_info_request_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = sec_info_request_process &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_start_send
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[2e3]"></a>sec_params_request_process</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, security_dispatcher.o(i.sec_params_request_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sec_params_request_process &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[204]"></a>sec_proc_start</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, security_dispatcher.o(i.sec_proc_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_new_peer
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
</UL>

<P><STRONG><a name="[2e4]"></a>sec_request_process</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, security_dispatcher.o(i.sec_request_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sec_request_process &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[205]"></a>sec_start_send</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, security_dispatcher.o(i.sec_start_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sec_start_send &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
</UL>

<P><STRONG><a name="[178]"></a>events_send_from_err_code</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, security_manager.o(i.events_send_from_err_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = events_send_from_err_code &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[179]"></a>evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, security_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_config_req
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
</UL>

<P><STRONG><a name="[1a0]"></a>flag_id_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, security_manager.o(i.flag_id_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flag_id_init &rArr; ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_init
</UL>

<P><STRONG><a name="[1a1]"></a>flags_set_from_err_code</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, security_manager.o(i.flags_set_from_err_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = flags_set_from_err_code &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[1ff]"></a>link_secure</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, security_manager.o(i.link_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
</UL>

<P><STRONG><a name="[209]"></a>link_secure_pending_process</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, security_manager.o(i.link_secure_pending_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = link_secure_pending_process &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_any_set
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdb_evt_handler
</UL>

<P><STRONG><a name="[28f]"></a>params_reply_pending_process</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, security_manager.o(i.params_reply_pending_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = params_reply_pending_process &rArr; smd_params_reply_perform &rArr; smd_params_reply &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_any_set
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdb_evt_handler
</UL>

<P><STRONG><a name="[20a]"></a>sdk_mapped_flags_any_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, security_manager.o(i.sdk_mapped_flags_any_set))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
</UL>

<P><STRONG><a name="[2eb]"></a>sec_params_verify</STRONG> (Thumb, 264 bytes, Stack size 0 bytes, security_manager.o(i.sec_params_verify))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_sec_params_set
</UL>

<P><STRONG><a name="[2e5]"></a>send_config_req</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, security_manager.o(i.send_config_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = send_config_req &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
</UL>

<P><STRONG><a name="[290]"></a>smd_params_reply_perform</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, security_manager.o(i.smd_params_reply_perform))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = smd_params_reply_perform &rArr; smd_params_reply &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_config_req
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
</UL>

<P><STRONG><a name="[e9]"></a>battery_level_char_add</STRONG> (Thumb, 448 bytes, Stack size 88 bytes, ble_bas.o(i.battery_level_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = battery_level_char_add &rArr; ble_srv_report_ref_encode &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_report_ref_encode
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_init
</UL>

<P><STRONG><a name="[fe]"></a>on_connect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_bas.o(i.on_connect))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_on_ble_evt
</UL>

<P><STRONG><a name="[ff]"></a>on_disconnect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_bas.o(i.on_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_on_ble_evt
</UL>

<P><STRONG><a name="[100]"></a>on_write</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ble_bas.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_write &rArr; ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_on_ble_evt
</UL>

<P><STRONG><a name="[116]"></a>char_add</STRONG> (Thumb, 224 bytes, Stack size 80 bytes, ble_dis.o(i.char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = char_add &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[118]"></a>pnp_id_encode</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ble_dis.o(i.pnp_id_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pnp_id_encode &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[117]"></a>sys_id_encode</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ble_dis.o(i.sys_id_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sys_id_encode &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[2ca]"></a>uint16_encode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_dis.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnp_id_encode
</UL>

<P><STRONG><a name="[125]"></a>boot_inp_rep_char_add</STRONG> (Thumb, 264 bytes, Stack size 80 bytes, ble_hids.o(i.boot_inp_rep_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = boot_inp_rep_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_init
</UL>

<P><STRONG><a name="[126]"></a>boot_kb_outp_rep_char_add</STRONG> (Thumb, 196 bytes, Stack size 72 bytes, ble_hids.o(i.boot_kb_outp_rep_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = boot_kb_outp_rep_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_init
</UL>

<P><STRONG><a name="[16e]"></a>encode_hid_information</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ble_hids.o(i.encode_hid_information))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = encode_hid_information &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_information_char_add
</UL>

<P><STRONG><a name="[123]"></a>feature_rep_characteristics_add</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ble_hids.o(i.feature_rep_characteristics_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = feature_rep_characteristics_add &rArr; rep_char_add &rArr; ble_srv_report_ref_encode &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rep_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_init
</UL>

<P><STRONG><a name="[128]"></a>hid_control_point_char_add</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, ble_hids.o(i.hid_control_point_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hid_control_point_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_init
</UL>

<P><STRONG><a name="[127]"></a>hid_information_char_add</STRONG> (Thumb, 184 bytes, Stack size 80 bytes, ble_hids.o(i.hid_information_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = hid_information_char_add &rArr; encode_hid_information &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_hid_information
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_init
</UL>

<P><STRONG><a name="[11f]"></a>includes_add</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ble_hids.o(i.includes_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = includes_add
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_init
</UL>

<P><STRONG><a name="[1f4]"></a>inp_rep_cccd_identify</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ble_hids.o(i.inp_rep_cccd_identify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inp_rep_cccd_identify &rArr; make_char_id
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_char_id
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>

<P><STRONG><a name="[121]"></a>inp_rep_characteristics_add</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, ble_hids.o(i.inp_rep_characteristics_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = inp_rep_characteristics_add &rArr; rep_char_add &rArr; ble_srv_report_ref_encode &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rep_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_init
</UL>

<P><STRONG><a name="[1f5]"></a>make_char_id</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_hids.o(i.make_char_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = make_char_id
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rep_value_identify
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inp_rep_cccd_identify
</UL>

<P><STRONG><a name="[129]"></a>on_connect</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, ble_hids.o(i.on_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_on_ble_evt
</UL>

<P><STRONG><a name="[287]"></a>on_control_point_write</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ble_hids.o(i.on_control_point_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_control_point_write
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>

<P><STRONG><a name="[12a]"></a>on_disconnect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_hids.o(i.on_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_on_ble_evt
</UL>

<P><STRONG><a name="[288]"></a>on_protocol_mode_write</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ble_hids.o(i.on_protocol_mode_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_protocol_mode_write
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>

<P><STRONG><a name="[284]"></a>on_report_cccd_write</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, ble_hids.o(i.on_report_cccd_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = on_report_cccd_write &rArr; ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>

<P><STRONG><a name="[286]"></a>on_report_value_read_auth</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, ble_hids.o(i.on_report_value_read_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_report_value_read_auth
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rw_authorize_request
</UL>

<P><STRONG><a name="[289]"></a>on_report_value_write</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, ble_hids.o(i.on_report_value_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_report_value_write
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>

<P><STRONG><a name="[12c]"></a>on_rw_authorize_request</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ble_hids.o(i.on_rw_authorize_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = on_rw_authorize_request &rArr; on_report_value_read_auth
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rep_value_identify
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_report_value_read_auth
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_on_ble_evt
</UL>

<P><STRONG><a name="[12b]"></a>on_write</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, ble_hids.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = on_write &rArr; on_report_cccd_write &rArr; ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rep_value_identify
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_report_value_write
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_report_cccd_write
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_protocol_mode_write
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_control_point_write
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_char_id
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inp_rep_cccd_identify
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_on_ble_evt
</UL>

<P><STRONG><a name="[122]"></a>outp_rep_characteristics_add</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, ble_hids.o(i.outp_rep_characteristics_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = outp_rep_characteristics_add &rArr; rep_char_add &rArr; ble_srv_report_ref_encode &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rep_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_init
</UL>

<P><STRONG><a name="[120]"></a>protocol_mode_char_add</STRONG> (Thumb, 178 bytes, Stack size 72 bytes, ble_hids.o(i.protocol_mode_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = protocol_mode_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_init
</UL>

<P><STRONG><a name="[19b]"></a>rep_char_add</STRONG> (Thumb, 388 bytes, Stack size 104 bytes, ble_hids.o(i.rep_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rep_char_add &rArr; ble_srv_report_ref_encode &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_report_ref_encode
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outp_rep_characteristics_add
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inp_rep_characteristics_add
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feature_rep_characteristics_add
</UL>

<P><STRONG><a name="[124]"></a>rep_map_char_add</STRONG> (Thumb, 424 bytes, Stack size 96 bytes, ble_hids.o(i.rep_map_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rep_map_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_init
</UL>

<P><STRONG><a name="[285]"></a>rep_value_identify</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, ble_hids.o(i.rep_value_identify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rep_value_identify &rArr; make_char_id
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_char_id
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rw_authorize_request
</UL>

<P><STRONG><a name="[7e]"></a>clock_clk_started_notify</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.clock_clk_started_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_soc_event
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[156]"></a>item_dequeue</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.item_dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>

<P><STRONG><a name="[7b]"></a>nrf_clock_event_check</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[7c]"></a>nrf_clock_event_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[7d]"></a>nrf_clock_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[239]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, nrf_drv_common.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>

<P><STRONG><a name="[242]"></a>channel_free</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[77]"></a>channel_handler_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[23f]"></a>channel_port_alloc</STRONG> (Thumb, 116 bytes, Stack size 52 bytes, nrf_drv_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[79]"></a>channel_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[78]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, nrf_drv_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_bitmask_bit_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[240]"></a>nrf_gpio_cfg</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[7a]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_gpio_cfg_sense_set
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[23c]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpio_pin_read))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_is_set
</UL>

<P><STRONG><a name="[76]"></a>nrf_gpio_ports_read</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, nrf_drv_gpiote.o(i.nrf_gpio_ports_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_ports_read
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[26a]"></a>nrf_gpiote_event_addr_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_addr_get))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
</UL>

<P><STRONG><a name="[75]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[74]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_is_set
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[23d]"></a>nrf_gpiote_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[23e]"></a>pin_in_use_by_gpiote</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_gpiote))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[23a]"></a>pin_in_use_by_port</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_port))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
</UL>

<P><STRONG><a name="[23b]"></a>pin_in_use_by_te</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_te))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
</UL>

<P><STRONG><a name="[241]"></a>pin_in_use_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_clear))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[2ff]"></a>nrf_uart_errorsrc_get_and_clear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_errorsrc_get_and_clear))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[2fc]"></a>nrf_uart_event_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[2dc]"></a>nrf_uart_event_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
</UL>

<P><STRONG><a name="[2fd]"></a>nrf_uart_int_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[2fb]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[2fe]"></a>nrf_uart_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[2db]"></a>rx_byte</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[300]"></a>rx_done_event</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[2fa]"></a>tx_byte</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.tx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[301]"></a>tx_done_event</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[8f]"></a>uart_irq_handler</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_disable
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_errorsrc_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[243]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, nrf_drv_qdec.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_qdec_init
</UL>

<P><STRONG><a name="[7f]"></a>nrf_qdec_int_enable_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_qdec.o(i.nrf_qdec_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDEC_IRQHandler
</UL>

<P><STRONG><a name="[19d]"></a>finish_transfer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_drv_spi.o(i.finish_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finish_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spi
</UL>

<P><STRONG><a name="[87]"></a>irq_handler_spi</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.irq_handler_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irq_handler_spi &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_byte
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_event_clear
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_TWI0_IRQHandler
</UL>

<P><STRONG><a name="[250]"></a>nrf_gpio_cfg</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, nrf_drv_spi.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>

<P><STRONG><a name="[24f]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[24e]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
</UL>

<P><STRONG><a name="[19e]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
</UL>

<P><STRONG><a name="[1fd]"></a>nrf_spi_event_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spi_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spi
</UL>

<P><STRONG><a name="[254]"></a>nrf_spi_int_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spi_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>

<P><STRONG><a name="[251]"></a>nrf_spi_int_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spi_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>

<P><STRONG><a name="[2f1]"></a>nrf_spi_txd_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spi_txd_set))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_byte
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>

<P><STRONG><a name="[255]"></a>spi_xfer</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.spi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_byte
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_txd_set
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_int_enable
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_int_disable
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_event_clear
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
</UL>

<P><STRONG><a name="[1fe]"></a>transfer_byte</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, nrf_drv_spi.o(i.transfer_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_txd_set
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spi
</UL>

<P><STRONG><a name="[8e]"></a>irq_handler</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, nrf_drv_timer.o(i.irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_int_get
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[25b]"></a>nrf_drv_get_IRQn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_drv_get_IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
</UL>

<P><STRONG><a name="[1fa]"></a>nrf_timer_compare_event_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_compare_event_get))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[1fb]"></a>nrf_timer_compare_int_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_compare_int_get))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
</UL>

<P><STRONG><a name="[1fc]"></a>nrf_timer_event_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[258]"></a>nrf_timer_int_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
</UL>

<P><STRONG><a name="[257]"></a>nrf_timer_int_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
</UL>

<P><STRONG><a name="[25a]"></a>nrf_timer_shorts_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_shorts_disable))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_extended_compare
</UL>

<P><STRONG><a name="[259]"></a>nrf_timer_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_enable
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_disable
</UL>

<P><STRONG><a name="[279]"></a>nrf_queue_next_idx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_queue.o(i.nrf_queue_next_idx))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_full
</UL>

<P><STRONG><a name="[27b]"></a>queue_read</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, nrf_queue.o(i.queue_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = queue_read
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_read
</UL>

<P><STRONG><a name="[27a]"></a>queue_utilization_get</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, nrf_queue.o(i.queue_utilization_get))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_read
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
</UL>

<P><STRONG><a name="[248]"></a>nrf_drv_rng_setup</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nrf_drv_rng.o(i.nrf_drv_rng_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_rng_setup &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_init
</UL>

<P><STRONG><a name="[249]"></a>nrf_drv_rng_start</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_drv_rng.o(i.nrf_drv_rng_start))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_rand
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_init
</UL>

<P><STRONG><a name="[84]"></a>nrf_drv_rng_stop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_rng.o(i.nrf_drv_rng_stop))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_uninit
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_IRQHandler
</UL>

<P><STRONG><a name="[66]"></a>adc_sample_process</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, nrf_drv_adc.o(i.adc_sample_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_sample_process
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_event_clear
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_config_set
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>nrf_adc_config_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_adc_config_set))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample_process
</UL>

<P><STRONG><a name="[235]"></a>nrf_adc_event_check</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_adc_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
</UL>

<P><STRONG><a name="[64]"></a>nrf_adc_event_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_adc_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample_process
</UL>

<P><STRONG><a name="[65]"></a>nrf_adc_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_adc_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_uninit
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[234]"></a>nrf_adc_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_adc_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
</UL>

<P><STRONG><a name="[2c]"></a>detection_delay_timeout_handler</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, app_button.o(i.detection_delay_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = detection_delay_timeout_handler &rArr; nrf_drv_gpiote_in_is_set
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(i.app_button_init)
</UL>
<P><STRONG><a name="[2b]"></a>gpiote_event_handler</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, app_button.o(i.gpiote_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gpiote_event_handler &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_is_set
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_delay_timeout_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(i.app_button_init)
</UL>
<P><STRONG><a name="[c7]"></a>next_index</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_scheduler.o(i.next_index))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_execute
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
</UL>

<P><STRONG><a name="[cc]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[ce]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[2f6]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>

<P><STRONG><a name="[cd]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, app_timer.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
</UL>

<P><STRONG><a name="[157]"></a>compare_reg_update</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = compare_reg_update &rArr; timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_compare0_set
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[2f3]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[2f4]"></a>expired_timers_handler</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, app_timer.o(i.expired_timers_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = expired_timers_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[20b]"></a>list_deletions_handler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, app_timer.o(i.list_deletions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = list_deletions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[20d]"></a>list_insertions_handler</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_insertions_handler &rArr; timer_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[15b]"></a>nrf_delay_us</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, app_timer.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[15a]"></a>rtc1_compare0_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.rtc1_compare0_set))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[d0]"></a>rtc1_counter_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.rtc1_counter_get))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[cf]"></a>rtc1_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[159]"></a>rtc1_start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc1_start
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[cb]"></a>rtc1_stop</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[158]"></a>ticks_diff_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_timer.o(i.ticks_diff_get))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[2f2]"></a>timeout_handler_exec</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, app_timer.o(i.timeout_handler_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = timeout_handler_exec &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[88]"></a>timer_list_handler</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = timer_list_handler &rArr; compare_reg_update &rArr; timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expired_timers_handler
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_IRQHandler
</UL>

<P><STRONG><a name="[2f5]"></a>timer_list_handler_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_handler_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[20e]"></a>timer_list_insert</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[20c]"></a>timer_list_remove</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, app_timer.o(i.timer_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = timer_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
</UL>

<P><STRONG><a name="[d2]"></a>timer_start_op_schedule</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, app_timer.o(i.timer_start_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[d3]"></a>timer_stop_op_schedule</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, app_timer.o(i.timer_stop_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = timer_stop_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[86]"></a>timer_timeouts_check</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = timer_timeouts_check &rArr; timeout_handler_exec &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[15c]"></a>timer_timeouts_check_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(i.timer_timeouts_check_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[2f7]"></a>user_op_alloc</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = user_op_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[2f8]"></a>user_op_enque</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.user_op_enque))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[2d]"></a>app_timer_evt_get</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, app_timer_appsh.o(i.app_timer_evt_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = app_timer_evt_get &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_timer_appsh.o(i.app_timer_evt_schedule)
</UL>
<P><STRONG><a name="[d4]"></a>__sd_nvic_irq_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_util_platform.o(i.__sd_nvic_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[9d]"></a>address_is_valid</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fds.o(i.address_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = address_is_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>

<P><STRONG><a name="[152]"></a>chunk_is_aligned</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fds.o(i.chunk_is_aligned))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chunk_is_aligned
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[2da]"></a>chunk_queue_get_and_advance</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fds.o(i.chunk_queue_get_and_advance))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_write_chunk
</UL>

<P><STRONG><a name="[2cd]"></a>chunk_queue_skip</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fds.o(i.chunk_queue_skip))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[162]"></a>delete_execute</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fds.o(i.delete_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_and_delete
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find_and_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[177]"></a>event_prepare</STRONG> (Thumb, 120 bytes, Stack size 4 bytes, fds.o(i.event_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = event_prepare &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[187]"></a>event_send</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fds.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[164]"></a>file_find_and_delete</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, fds.o(i.file_find_and_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = file_find_and_delete &rArr; record_header_flag_dirty &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[18b]"></a>flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fds.o(i.flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
</UL>

<P><STRONG><a name="[182]"></a>flag_is_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fds.o(i.flag_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve_cancel
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
</UL>

<P><STRONG><a name="[188]"></a>flag_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fds.o(i.flag_set))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
</UL>

<P><STRONG><a name="[3]"></a>fs_event_handler</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, fds.o(i.fs_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = fs_event_handler &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fds.o(fs_data)
</UL>
<P><STRONG><a name="[1b1]"></a>gc_execute</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, fds.o(i.gc_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_tag_new_swap
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_promote
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[1bc]"></a>gc_init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, fds.o(i.gc_init))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
</UL>

<P><STRONG><a name="[1b3]"></a>gc_next_page</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fds.o(i.gc_next_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[1b6]"></a>gc_page_erase</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fds.o(i.gc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gc_page_erase &rArr; gc_swap_erase &rArr; fs_erase &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[1b9]"></a>gc_page_next</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, fds.o(i.gc_page_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gc_page_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
</UL>

<P><STRONG><a name="[1b5]"></a>gc_record_copy</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fds.o(i.gc_record_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gc_record_copy &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[1b4]"></a>gc_record_find_next</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fds.o(i.gc_record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gc_record_find_next &rArr; gc_record_copy &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[1b2]"></a>gc_state_advance</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, fds.o(i.gc_state_advance))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gc_state_advance &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_update_swap_offset
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_pages
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[1ba]"></a>gc_swap_erase</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fds.o(i.gc_swap_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gc_swap_erase &rArr; fs_erase &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>

<P><STRONG><a name="[1be]"></a>gc_swap_pages</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, fds.o(i.gc_swap_pages))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
</UL>

<P><STRONG><a name="[1b7]"></a>gc_swap_promote</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fds.o(i.gc_swap_promote))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gc_swap_promote &rArr; page_tag_write_data &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[1b8]"></a>gc_tag_new_swap</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fds.o(i.gc_tag_new_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gc_tag_new_swap &rArr; page_tag_write_swap &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[1bd]"></a>gc_update_swap_offset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fds.o(i.gc_update_swap_offset))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
</UL>

<P><STRONG><a name="[28c]"></a>header_is_valid</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fds.o(i.header_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_scan
</UL>

<P><STRONG><a name="[1f1]"></a>init_execute</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, fds.o(i.init_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = init_execute &rArr; page_tag_write_data &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_set
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[9e]"></a>is_word_aligned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fds.o(i.is_word_aligned))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunk_is_aligned
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_is_valid
</UL>

<P><STRONG><a name="[183]"></a>op_enqueue</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, fds.o(i.op_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = op_enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunk_queue_next
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[2d3]"></a>page_from_record</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, fds.o(i.page_from_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = page_from_record
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>

<P><STRONG><a name="[309]"></a>page_has_space</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fds.o(i.page_has_space))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_reserve
</UL>

<P><STRONG><a name="[28d]"></a>page_identify</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fds.o(i.page_identify))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
</UL>

<P><STRONG><a name="[28e]"></a>page_is_erased</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fds.o(i.page_is_erased))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
</UL>

<P><STRONG><a name="[308]"></a>page_offsets_update</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fds.o(i.page_offsets_update))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[28b]"></a>page_scan</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, fds.o(i.page_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = page_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
</UL>

<P><STRONG><a name="[1bf]"></a>page_tag_write_data</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fds.o(i.page_tag_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = page_tag_write_data &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_promote
</UL>

<P><STRONG><a name="[1c0]"></a>page_tag_write_swap</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fds.o(i.page_tag_write_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = page_tag_write_swap &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_tag_new_swap
</UL>

<P><STRONG><a name="[18a]"></a>pages_init</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, fds.o(i.pages_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pages_init &rArr; page_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_scan
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_is_erased
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_identify
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>

<P><STRONG><a name="[2cb]"></a>queue_advance</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, fds.o(i.queue_advance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = queue_advance
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[1a7]"></a>queue_process</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, fds.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + In Cycle
<LI>Call Chain = queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_advance
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_clear
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_prepare
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunk_queue_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_event_handler
</UL>

<P><STRONG><a name="[184]"></a>queue_start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fds.o(i.queue_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_set
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[18f]"></a>record_find</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, fds.o(i.record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_in_file
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find_and_delete
</UL>

<P><STRONG><a name="[163]"></a>record_find_and_delete</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, fds.o(i.record_find_and_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = record_find_and_delete &rArr; record_header_flag_dirty &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[18d]"></a>record_find_by_desc</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fds.o(i.record_find_by_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_from_record
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_and_delete
</UL>

<P><STRONG><a name="[1bb]"></a>record_find_next</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, fds.o(i.record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
</UL>

<P><STRONG><a name="[19c]"></a>record_header_flag_dirty</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, fds.o(i.record_header_flag_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = record_header_flag_dirty &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_and_delete
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find_and_delete
</UL>

<P><STRONG><a name="[2d4]"></a>record_header_write_begin</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fds.o(i.record_header_write_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = record_header_write_begin &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[2d5]"></a>record_header_write_finalize</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, fds.o(i.record_header_write_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = record_header_write_finalize &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[2d6]"></a>record_header_write_id</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, fds.o(i.record_header_write_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = record_header_write_id &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[307]"></a>record_id_new</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fds.o(i.record_id_new))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[2d9]"></a>record_write_chunk</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, fds.o(i.record_write_chunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = record_write_chunk &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunk_queue_get_and_advance
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[194]"></a>write_enqueue</STRONG> (Thumb, 262 bytes, Stack size 64 bytes, fds.o(i.write_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_reserve
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_free
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_id_new
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_enqueue
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunk_is_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write_reserved
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_update
</UL>

<P><STRONG><a name="[2cc]"></a>write_execute</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, fds.o(i.write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = write_execute &rArr; record_write_chunk &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_write_chunk
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_id
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_finalize
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_begin
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_offsets_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[19a]"></a>write_space_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fds.o(i.write_space_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = write_space_free
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve_cancel
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[198]"></a>write_space_reserve</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, fds.o(i.write_space_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_space_reserve
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_has_space
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[1a4]"></a>check_config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fstorage.o(i.check_config))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>

<P><STRONG><a name="[2cf]"></a>erase_execute</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fstorage.o(i.erase_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = erase_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[1ab]"></a>fs_flash_page_end_addr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fstorage.o(i.fs_flash_page_end_addr))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_init
</UL>

<P><STRONG><a name="[1ae]"></a>on_operation_failure</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fstorage.o(i.on_operation_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_operation_failure &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_event
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_advance
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_sys_event_handler
</UL>

<P><STRONG><a name="[1ad]"></a>on_operation_success</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, fstorage.o(i.on_operation_success))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = on_operation_success &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_event
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_advance
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_sys_event_handler
</UL>

<P><STRONG><a name="[27f]"></a>queue_advance</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fstorage.o(i.queue_advance))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_success
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_failure
</UL>

<P><STRONG><a name="[1a5]"></a>queue_get_next_free</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fstorage.o(i.queue_get_next_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = queue_get_next_free
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>

<P><STRONG><a name="[1af]"></a>queue_process</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fstorage.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_execute
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_event
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_sys_event_handler
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
</UL>

<P><STRONG><a name="[1a6]"></a>queue_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fstorage.o(i.queue_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>

<P><STRONG><a name="[27e]"></a>send_event</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, fstorage.o(i.send_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_success
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_failure
</UL>

<P><STRONG><a name="[2ce]"></a>store_execute</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fstorage.o(i.store_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = store_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[2e1]"></a>sdk_mapped_flags_get_by_index</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_get_by_index))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_first_key_index_get
</UL>

<P><STRONG><a name="[271]"></a>buf_len_update</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_log_backend_serial.o(i.buf_len_update))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_process
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
</UL>

<P><STRONG><a name="[26d]"></a>byte2hex</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, nrf_log_backend_serial.o(i.byte2hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = byte2hex
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[3e]"></a>nrf_log_backend_serial_hexdump_handler</STRONG> (Thumb, 350 bytes, Stack size 328 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_serial_hexdump_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = nrf_log_backend_serial_hexdump_handler &rArr; timestamp_process &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_process
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_is_busy
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte2hex
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_serial.o(i.nrf_log_backend_hexdump_handler_get)
</UL>
<P><STRONG><a name="[3f]"></a>nrf_log_backend_serial_std_handler</STRONG> (Thumb, 404 bytes, Stack size 320 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_serial_std_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = nrf_log_backend_serial_std_handler &rArr; timestamp_process &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_process
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_is_busy
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_len_update
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_serial.o(i.nrf_log_backend_std_handler_get)
</UL>
<P><STRONG><a name="[26b]"></a>serial_is_busy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_log_backend_serial.o(i.serial_is_busy))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[26f]"></a>serial_tx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_log_backend_serial.o(i.serial_tx))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[26c]"></a>timestamp_process</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, nrf_log_backend_serial.o(i.timestamp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = timestamp_process &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_len_update
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[14d]"></a>buf_prealloc</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.buf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>

<P><STRONG><a name="[2f0]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, softdevice_handler.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
</UL>

<P><STRONG><a name="[2e0]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, softdevice_handler.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>

<P><STRONG><a name="[2df]"></a>__sd_nvic_app_accessible_irq</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, softdevice_handler.o(i.__sd_nvic_app_accessible_irq))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>

<P><STRONG><a name="[2ef]"></a>nrf_drv_common_irq_enable_check</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, softdevice_handler.o(i.nrf_drv_common_irq_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
</UL>

<P><STRONG><a name="[2ee]"></a>ram_end_address_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, softdevice_handler.o(i.ram_end_address_get))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable
</UL>

<P><STRONG><a name="[2de]"></a>sd_nvic_EnableIRQ</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, softdevice_handler.o(i.sd_nvic_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
</UL>

<P><STRONG><a name="[267]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_esb.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_start_rx
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
</UL>

<P><STRONG><a name="[25d]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_esb.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_read_rx_payload
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_flush_tx
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_fifo_remove_last
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_clear_interrupts
</UL>

<P><STRONG><a name="[260]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_esb.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_start_rx
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_read_rx_payload
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_flush_tx
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_fifo_remove_last
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_clear_interrupts
</UL>

<P><STRONG><a name="[282]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_esb.o(i.NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_wait_for_ack
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_noack
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_rx
</UL>

<P><STRONG><a name="[264]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, nrf_esb.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[9b]"></a>addr_conv</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_esb.o(i.addr_conv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = addr_conv
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytewise_bit_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_addresses
</UL>

<P><STRONG><a name="[9c]"></a>bytewise_bit_swap</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, nrf_esb.o(i.bytewise_bit_swap))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_addresses
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_conv
</UL>

<P><STRONG><a name="[280]"></a>clear_events_restart_rx</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, nrf_esb.o(i.clear_events_restart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_events_restart_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_rx
</UL>

<P><STRONG><a name="[1f2]"></a>initialize_fifos</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nrf_esb.o(i.initialize_fifos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initialize_fifos
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_fifos
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[8a]"></a>nrf_esb_get_clear_interrupts</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_get_clear_interrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_get_clear_interrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI3_IRQHandler
</UL>

<P><STRONG><a name="[3d]"></a>on_radio_disabled_rx</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, nrf_esb.o(i.on_radio_disabled_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_radio_disabled_rx &rArr; rx_fifo_push_rfbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_fifo_push_rfbuf
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_events_restart_rx
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_esb.o(i.nrf_esb_start_rx)
<LI> nrf_esb.o(i.on_radio_disabled_rx_ack)
</UL>
<P><STRONG><a name="[40]"></a>on_radio_disabled_rx_ack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf_esb.o(i.on_radio_disabled_rx_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_radio_disabled_rx_ack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_esb.o(i.on_radio_disabled_rx)
</UL>
<P><STRONG><a name="[42]"></a>on_radio_disabled_tx</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, nrf_esb.o(i.on_radio_disabled_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_radio_disabled_tx
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_esb.o(i.on_radio_disabled_tx_wait_for_ack)
<LI> nrf_esb.o(i.start_tx_transaction)
</UL>
<P><STRONG><a name="[47]"></a>on_radio_disabled_tx_noack</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrf_esb.o(i.on_radio_disabled_tx_noack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_radio_disabled_tx_noack &rArr; tx_fifo_remove_last
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_fifo_remove_last
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_esb.o(i.start_tx_transaction)
</UL>
<P><STRONG><a name="[41]"></a>on_radio_disabled_tx_wait_for_ack</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, nrf_esb.o(i.on_radio_disabled_tx_wait_for_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = on_radio_disabled_tx_wait_for_ack &rArr; rx_fifo_push_rfbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_fifo_remove_last
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_fifo_push_rfbuf
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_esb.o(i.on_radio_disabled_tx)
</UL>
<P><STRONG><a name="[263]"></a>ppi_init</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, nrf_esb.o(i.ppi_init))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[1f3]"></a>reset_fifos</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_esb.o(i.reset_fifos))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_fifos
</UL>

<P><STRONG><a name="[281]"></a>rx_fifo_push_rfbuf</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, nrf_esb.o(i.rx_fifo_push_rfbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rx_fifo_push_rfbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_wait_for_ack
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_rx
</UL>

<P><STRONG><a name="[268]"></a>start_tx_transaction</STRONG> (Thumb, 332 bytes, Stack size 8 bytes, nrf_esb.o(i.start_tx_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = start_tx_transaction
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_wait_for_ack
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_noack
</UL>

<P><STRONG><a name="[262]"></a>sys_timer_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_esb.o(i.sys_timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[283]"></a>tx_fifo_remove_last</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrf_esb.o(i.tx_fifo_remove_last))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tx_fifo_remove_last
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_wait_for_ack
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_noack
</UL>

<P><STRONG><a name="[265]"></a>update_radio_addresses</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, nrf_esb.o(i.update_radio_addresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_radio_addresses &rArr; addr_conv
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytewise_bit_swap
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_conv
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_update_prefix
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_0
</UL>

<P><STRONG><a name="[302]"></a>update_radio_bitrate</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, nrf_esb.o(i.update_radio_bitrate))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_parameters
</UL>

<P><STRONG><a name="[304]"></a>update_radio_crc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nrf_esb.o(i.update_radio_crc))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_parameters
</UL>

<P><STRONG><a name="[261]"></a>update_radio_parameters</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_esb.o(i.update_radio_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = update_radio_parameters
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_tx_power
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_protocol
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_crc
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_bitrate
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[303]"></a>update_radio_protocol</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrf_esb.o(i.update_radio_protocol))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_parameters
</UL>

<P><STRONG><a name="[266]"></a>update_radio_tx_power</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_esb.o(i.update_radio_tx_power))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_tx_power
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_parameters
</UL>

<P><STRONG><a name="[4c]"></a>update_rf_payload_format_esb</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_esb.o(i.update_rf_payload_format_esb))
<BR>[Address Reference Count : 1]<UL><LI> nrf_esb.o(i.update_radio_protocol)
</UL>
<P><STRONG><a name="[4b]"></a>update_rf_payload_format_esb_dpl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_esb.o(i.update_rf_payload_format_esb_dpl))
<BR>[Address Reference Count : 1]<UL><LI> nrf_esb.o(i.update_radio_protocol)
</UL>
<P><STRONG><a name="[8c]"></a>is_disabled_in_debug_needed</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, system_nrf51.o(i.is_disabled_in_debug_needed))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[8b]"></a>is_manual_peripheral_setup_needed</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, system_nrf51.o(i.is_manual_peripheral_setup_needed))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[8d]"></a>is_peripheral_domain_setup_needed</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf51.o(i.is_peripheral_domain_setup_needed))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[91]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$8
</UL>

<P><STRONG><a name="[93]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[92]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[27]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf8.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0snprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
