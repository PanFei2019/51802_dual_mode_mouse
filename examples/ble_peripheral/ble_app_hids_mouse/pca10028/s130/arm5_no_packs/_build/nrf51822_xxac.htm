<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\nrf51822_xxac.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\nrf51822_xxac.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Oct 13 22:09:55 2021
<BR><P>
<H3>Maximum Stack Usage =        444 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; enter_normal_mode &rArr; getMotion &rArr; CheckSensor &rArr; ChenkSensorSync &rArr; readReg &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">NMI_Handler</a><BR>
 <LI><a href="#[4]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">HardFault_Handler</a><BR>
 <LI><a href="#[5]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SVC_Handler</a><BR>
 <LI><a href="#[6]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">PendSV_Handler</a><BR>
 <LI><a href="#[7]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SysTick_Handler</a><BR>
 <LI><a href="#[16]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[df]">queue_process</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[df]">queue_process</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[e]">ADC_IRQHandler</a> from nrf_drv_adc.o(i.ADC_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[16]">CCM_AAR_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[15]">ECB_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[d]">GPIOTE_IRQHandler</a> from nrf_drv_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1a]">LPCOMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[8]">POWER_CLOCK_IRQHandler</a> from nrf_drv_clock.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[6]">PendSV_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[19]">QDEC_IRQHandler</a> from nrf_drv_qdec.o(i.QDEC_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[9]">RADIO_IRQHandler</a> from nrf_esb.o(i.RADIO_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[14]">RNG_IRQHandler</a> from nrf_drv_rng.o(i.RNG_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[12]">RTC0_IRQHandler</a> from nrf_drv_rtc.o(i.RTC0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[18]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[b]">SPI0_TWI0_IRQHandler</a> from nrf_drv_spi.o(i.SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[c]">SPI1_TWI1_IRQHandler</a> from nrf_drv_twi.o(i.SPI1_TWI1_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[5]">SVC_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1b]">SWI0_IRQHandler</a> from app_timer.o(i.SWI0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1c]">SWI1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1d]">SWI2_IRQHandler</a> from softdevice_handler.o(i.SWI2_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1e]">SWI3_IRQHandler</a> from nrf_esb.o(i.SWI3_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1f]">SWI4_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[20]">SWI5_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[7]">SysTick_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[22]">SystemInit</a> from system_nrf51.o(i.SystemInit) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[13]">TEMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[f]">TIMER0_IRQHandler</a> from nrf_drv_timer.o(i.TIMER0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[10]">TIMER1_IRQHandler</a> from nrf_drv_timer.o(i.TIMER1_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[11]">TIMER2_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[a]">UART0_IRQHandler</a> from nrf_drv_uart.o(i.UART0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[17]">WDT_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[23]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[24]">_snputc</a> from printf8.o(i._snputc) referenced from printf8.o(i.__0snprintf$8)
 <LI><a href="#[25]">adc_event_handler</a> from main.o(i.adc_event_handler) referenced from main.o(i.adc_config)
 <LI><a href="#[2b]">button_event_handler</a> from main.o(i.button_event_handler) referenced from main.o(i.main)
 <LI><a href="#[1]">fs_event_handler</a> from fds.o(i.fs_event_handler) referenced 2 times from fds.o(fs_data)
 <LI><a href="#[0]">fs_evt_handler</a> from main.o(i.fs_evt_handler) referenced 8 times from main.o(fs_data)
 <LI><a href="#[21]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[28]">nrf_esb_event_handler</a> from main.o(i.nrf_esb_event_handler) referenced from main.o(i.esb_init)
 <LI><a href="#[2d]">nrf_log_backend_serial_hexdump_handler</a> from nrf_log_backend_serial.o(i.nrf_log_backend_serial_hexdump_handler) referenced from nrf_log_backend_serial.o(i.nrf_log_backend_hexdump_handler_get)
 <LI><a href="#[2f]">nrf_log_backend_serial_std_handler</a> from nrf_log_backend_serial.o(i.nrf_log_backend_serial_std_handler) referenced from nrf_log_backend_serial.o(i.nrf_log_backend_std_handler_get)
 <LI><a href="#[2c]">on_radio_disabled_rx</a> from nrf_esb.o(i.on_radio_disabled_rx) referenced from nrf_esb.o(i.nrf_esb_start_rx)
 <LI><a href="#[2c]">on_radio_disabled_rx</a> from nrf_esb.o(i.on_radio_disabled_rx) referenced from nrf_esb.o(i.on_radio_disabled_rx_ack)
 <LI><a href="#[30]">on_radio_disabled_rx_ack</a> from nrf_esb.o(i.on_radio_disabled_rx_ack) referenced from nrf_esb.o(i.on_radio_disabled_rx)
 <LI><a href="#[32]">on_radio_disabled_tx</a> from nrf_esb.o(i.on_radio_disabled_tx) referenced from nrf_esb.o(i.on_radio_disabled_tx_wait_for_ack)
 <LI><a href="#[32]">on_radio_disabled_tx</a> from nrf_esb.o(i.on_radio_disabled_tx) referenced from nrf_esb.o(i.start_tx_transaction)
 <LI><a href="#[34]">on_radio_disabled_tx_noack</a> from nrf_esb.o(i.on_radio_disabled_tx_noack) referenced from nrf_esb.o(i.start_tx_transaction)
 <LI><a href="#[31]">on_radio_disabled_tx_wait_for_ack</a> from nrf_esb.o(i.on_radio_disabled_tx_wait_for_ack) referenced from nrf_esb.o(i.on_radio_disabled_tx)
 <LI><a href="#[27]">qdec_event_handler</a> from main.o(i.qdec_event_handler) referenced from main.o(i.enter_normal_mode)
 <LI><a href="#[33]">rtc_handler</a> from main.o(i.rtc_handler) referenced from main.o(i.rtc_config)
 <LI><a href="#[26]">spi_event_handler</a> from main.o(i.spi_event_handler) referenced from main.o(i.enable_spi)
 <LI><a href="#[26]">spi_event_handler</a> from main.o(i.spi_event_handler) referenced from main.o(i.main)
 <LI><a href="#[2a]">timer_for_sleep_event_handler</a> from main.o(i.timer_for_sleep_event_handler) referenced from main.o(i.main)
 <LI><a href="#[29]">timer_led_event_handler</a> from main.o(i.timer_led_event_handler) referenced from main.o(i.main)
 <LI><a href="#[2e]">uart_event_handler</a> from nrf_log_backend_serial.o(i.uart_event_handler) referenced from nrf_log_backend_serial.o(i.nrf_log_backend_init)
 <LI><a href="#[36]">update_rf_payload_format_esb</a> from nrf_esb.o(i.update_rf_payload_format_esb) referenced from nrf_esb.o(i.update_radio_protocol)
 <LI><a href="#[35]">update_rf_payload_format_esb_dpl</a> from nrf_esb.o(i.update_rf_payload_format_esb_dpl) referenced from nrf_esb.o(i.update_radio_protocol)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[23]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[1a0]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[37]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1a1]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1a2]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1a3]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1a4]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1a5]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SWI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SWI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1a6]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_event_handler
</UL>

<P><STRONG><a name="[165]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_0
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_read_rx_payload
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_fifo_push_rfbuf
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_rx
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_init
</UL>

<P><STRONG><a name="[1a7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1a8]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_pairing_mode
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_advance
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_get_next_free
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
</UL>

<P><STRONG><a name="[1aa]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[163]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[38]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1ab]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1ac]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1ad]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[e]"></a>ADC_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, nrf_drv_adc.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_IRQHandler &rArr; adc_sample_process
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_int_disable
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_event_clear
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CheckSensor</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, motion_sensor.o(i.CheckSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = CheckSensor &rArr; ChenkSensorSync &rArr; readReg &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomSensorReSynchronousSPI
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChenkSensorSync
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrPaw3205ReSynchronousSPI
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_spi
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMotion
</UL>

<P><STRONG><a name="[44]"></a>ChenkSensorSync</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, motion_sensor.o(i.ChenkSensorSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = ChenkSensorSync &rArr; readReg &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSensor
</UL>

<P><STRONG><a name="[49]"></a>CustomSensorReSynchronousSPI</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, motion_sensor.o(i.CustomSensorReSynchronousSPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CustomSensorReSynchronousSPI &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSensor
</UL>

<P><STRONG><a name="[d]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 618 bytes, Stack size 80 bytes, nrf_drv_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = GPIOTE_IRQHandler &rArr; nrf_gpio_ports_read
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>NRF_power_manage</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.NRF_power_manage))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>

<P><STRONG><a name="[8]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = POWER_CLOCK_IRQHandler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_disable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>QDEC_IRQHandler</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, nrf_drv_qdec.o(i.QDEC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QDEC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_qdec_int_enable_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RADIO_IRQHandler</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, nrf_esb.o(i.RADIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RADIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RNG_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, nrf_drv_rng.o(i.RNG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RNG_IRQHandler &rArr; nrf_queue_push &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_is_enabled
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_stop
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_full
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RTC0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_rtc.o(i.RTC0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC0_IRQHandler &rArr; nrf_drv_rtc_int_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_int_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RTC1_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check &rArr; timeout_handler_exec &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SPI0_TWI0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_spi.o(i.SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI0_TWI0_IRQHandler &rArr; irq_handler_spi &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SPI1_TWI1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.SPI1_TWI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SPI1_TWI1_IRQHandler &rArr; irq_handler_twi &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SWI0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_timer.o(i.SWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SWI0_IRQHandler &rArr; timer_list_handler &rArr; compare_reg_update &rArr; timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SWI2_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, softdevice_handler.o(i.SWI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = SWI2_IRQHandler &rArr; intern_softdevice_events_execute &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SWI3_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nrf_esb.o(i.SWI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SWI3_IRQHandler &rArr; nrf_esb_get_clear_interrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_clear_interrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, system_nrf51.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_peripheral_domain_setup_needed
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_manual_peripheral_setup_needed
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_disabled_in_debug_needed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_timer.o(i.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER0_IRQHandler &rArr; irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_timer.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER1_IRQHandler &rArr; irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>UART0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART0_IRQHandler &rArr; uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>__0snprintf$8</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b0]"></a>__1snprintf$8</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)

<P><STRONG><a name="[167]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_process
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
</UL>

<P><STRONG><a name="[47]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSensor
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flash_write
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_of_page
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_prepare
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
</UL>

<P><STRONG><a name="[1b1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1b2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1b3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[7d]"></a>address_of_page</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, main.o(i.address_of_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = address_of_page &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flash_write
</UL>

<P><STRONG><a name="[7e]"></a>app_error_fault_handler</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_blocking_backend_set
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>

<P><STRONG><a name="[67]"></a>app_error_handler_bare</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouse_scroll_send
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_config
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReg
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_led_event_handler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_spi
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_rf_channel_switch
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
</UL>

<P><STRONG><a name="[82]"></a>app_sched_execute</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, app_scheduler.o(i.app_sched_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_sched_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_index
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOn
</UL>

<P><STRONG><a name="[5c]"></a>app_util_critical_region_enter</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[61]"></a>app_util_critical_region_exit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[115]"></a>ble_hids_inp_rep_send</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, ble_hids.o(i.ble_hids_inp_rep_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_hids_inp_rep_send
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouse_scroll_send
</UL>

<P><STRONG><a name="[cb]"></a>bsp_board_led_invert</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, boards.o(i.bsp_board_led_invert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsp_board_led_invert
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_led_event_handler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_pairing_mode
</UL>

<P><STRONG><a name="[8b]"></a>bsp_board_led_off</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOn
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_led_event_handler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_pairing_mode
</UL>

<P><STRONG><a name="[8d]"></a>bsp_board_led_on</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_board_led_on &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOn
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_led_event_handler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_pairing_mode
</UL>

<P><STRONG><a name="[8e]"></a>bsp_board_leds_init</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, boards.o(i.bsp_board_leds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bsp_board_leds_init &rArr; bsp_board_leds_off &rArr; bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>bsp_board_leds_off</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, boards.o(i.bsp_board_leds_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_board_leds_off &rArr; bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
</UL>

<P><STRONG><a name="[169]"></a>buffer_is_empty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.buffer_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[2b]"></a>button_event_handler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, main.o(i.button_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = button_event_handler &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_enable
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_disable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clocks_start
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[93]"></a>clocks_start</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.clocks_start))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_event_handler
</UL>

<P><STRONG><a name="[a2]"></a>detect_direction</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, main.o(i.detect_direction))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = detect_direction &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>disable_qdec_with_qdec_state</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.disable_qdec_with_qdec_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = disable_qdec_with_qdec_state &rArr; get_QDEC_state &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_qdec_uninit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_QDEC_state
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>

<P><STRONG><a name="[aa]"></a>disable_spi</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.disable_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disable_spi &rArr; nrf_drv_spi_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOn
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>

<P><STRONG><a name="[ab]"></a>driver_rf_channel_switch</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, main.o(i.driver_rf_channel_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = driver_rf_channel_switch &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_rf_channel
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_pairing_mode
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>

<P><STRONG><a name="[ad]"></a>driver_sensor_two_spi_read_byte</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, motion_sensor.o(i.driver_sensor_two_spi_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = driver_sensor_two_spi_read_byte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg
</UL>

<P><STRONG><a name="[b0]"></a>driver_sensor_two_spi_send_byte</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, motion_sensor.o(i.driver_sensor_two_spi_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = driver_sensor_two_spi_send_byte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReg
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg
</UL>

<P><STRONG><a name="[4a]"></a>enable_spi</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, main.o(i.enable_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = enable_spi &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_evt_handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSensor
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BT_work_mode
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>

<P><STRONG><a name="[b2]"></a>enterOrExitSleepmode</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, motion_sensor.o(i.enterOrExitSleepmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = enterOrExitSleepmode &rArr; writeReg &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReg
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_evt_handler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BT_work_mode
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>

<P><STRONG><a name="[b4]"></a>enterOrExitjustSleepmode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, motion_sensor.o(i.enterOrExitjustSleepmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = enterOrExitjustSleepmode &rArr; writeReg &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>

<P><STRONG><a name="[b5]"></a>enter_normal_mode</STRONG> (Thumb, 2236 bytes, Stack size 80 bytes, main.o(i.enter_normal_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = enter_normal_mode &rArr; getMotion &rArr; CheckSensor &rArr; ChenkSensorSync &rArr; readReg &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_qdec_reportper_to_value
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_counter_clear
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_word_write
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrPaw3205setCPI
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOn
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_update_prefix
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_disable
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_enable
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_disable
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_qdec_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_qdec_enable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_uninit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMotion
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterOrExitjustSleepmode
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterOrExitSleepmode
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_off
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_base_address_0
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_QDEC_state
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_spi
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_rf_channel_switch
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_spi
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_qdec_with_qdec_state
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_event_handler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_power_manage
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>enter_pairing_mode</STRONG> (Thumb, 762 bytes, Stack size 64 bytes, main.o(i.enter_pairing_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = enter_pairing_mode &rArr; set_BT_work_mode &rArr; usrPaw3205setCPI &rArr; writeReg &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_stop_rx
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_start_rx
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BT_work_mode
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_rf_channel_switch
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>esb_init</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, main.o(i.esb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = esb_init &rArr; nrf_esb_update_prefix &rArr; update_radio_addresses &rArr; addr_conv
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_update_prefix
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_tx_power
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_0
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_address_length
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>fs_erase</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, fstorage.o(i.fs_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fs_erase &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_get_next_free
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flash_write
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_erase
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>

<P><STRONG><a name="[e3]"></a>fs_store</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, fstorage.o(i.fs_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_get_next_free
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_evt_handler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flash_write
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_write_chunk
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_id
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_finalize
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_begin
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
</UL>

<P><STRONG><a name="[c7]"></a>getMotion</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, motion_sensor.o(i.getMotion))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = getMotion &rArr; CheckSensor &rArr; ChenkSensorSync &rArr; readReg &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSensor
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>

<P><STRONG><a name="[a9]"></a>get_QDEC_state</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.get_QDEC_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = get_QDEC_state &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_qdec_with_qdec_state
</UL>

<P><STRONG><a name="[68]"></a>intern_softdevice_events_execute</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, softdevice_handler.o(i.intern_softdevice_events_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = intern_softdevice_events_execute &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_soc_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>m_flash_write</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, main.o(i.m_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = m_flash_write &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_of_page
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_evt_handler
</UL>

<P><STRONG><a name="[21]"></a>main</STRONG> (Thumb, 850 bytes, Stack size 120 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = main &rArr; enter_normal_mode &rArr; getMotion &rArr; CheckSensor &rArr; ChenkSensorSync &rArr; readReg &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_ms_to_ticks
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_config
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrPaw3205ReSynchronousSPI
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOn
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_rf_channel
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_extended_compare
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_enable
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_disable
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_QDEC_state
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_pairing_mode
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_spi
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_direction
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clocks_start
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[b6]"></a>modify_base_address_0</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(i.modify_base_address_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = modify_base_address_0 &rArr; nrf_esb_set_base_address_0 &rArr; update_radio_addresses &rArr; addr_conv
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_0
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>

<P><STRONG><a name="[116]"></a>nrf_drv_adc_buffer_convert</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, nrf_drv_adc.o(i.nrf_drv_adc_buffer_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_adc_buffer_convert &rArr; adc_sample_process
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_int_enable
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_event_clear
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_event_check
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_config_set
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample_process
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_led_event_handler
</UL>

<P><STRONG><a name="[75]"></a>nrf_drv_adc_channel_enable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_drv_adc_channel_enable))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[74]"></a>nrf_drv_adc_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrf_drv_adc.o(i.nrf_drv_adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_adc_init &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[18a]"></a>nrf_drv_adc_sample</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_drv_adc_sample))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_led_event_handler
</UL>

<P><STRONG><a name="[77]"></a>nrf_drv_adc_uninit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf_drv_adc.o(i.nrf_drv_adc_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_adc_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_event_handler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>

<P><STRONG><a name="[104]"></a>nrf_drv_clock_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_is_enabled
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_config
</UL>

<P><STRONG><a name="[105]"></a>nrf_drv_clock_lfclk_request</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_lfclk_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_clock_lfclk_request &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_start
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_enqueue
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_config
</UL>

<P><STRONG><a name="[f9]"></a>nrf_drv_clock_on_soc_event</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_on_soc_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_clock_on_soc_event &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>

<P><STRONG><a name="[119]"></a>nrf_drv_common_irq_enable</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_drv_common.o(i.nrf_drv_common_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_qdec_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[92]"></a>nrf_drv_gpiote_in_event_disable</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_event_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_drv_gpiote_in_event_disable &rArr; nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_event_handler
</UL>

<P><STRONG><a name="[c1]"></a>nrf_drv_gpiote_in_event_enable</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_drv_gpiote_in_event_enable &rArr; nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_int_enable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>

<P><STRONG><a name="[113]"></a>nrf_drv_gpiote_in_init</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_gpiote
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>nrf_drv_gpiote_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_gpiote_init &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_clear
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_int_enable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>nrf_drv_qdec_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_drv_qdec.o(i.nrf_drv_qdec_disable))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_qdec_uninit
</UL>

<P><STRONG><a name="[c0]"></a>nrf_drv_qdec_enable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_qdec.o(i.nrf_drv_qdec_enable))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>

<P><STRONG><a name="[be]"></a>nrf_drv_qdec_init</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, nrf_drv_qdec.o(i.nrf_drv_qdec_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_drv_qdec_init &rArr; nrf_gpio_cfg_input
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>

<P><STRONG><a name="[a8]"></a>nrf_drv_qdec_uninit</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, nrf_drv_qdec.o(i.nrf_drv_qdec_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nrf_drv_qdec_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_qdec_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_qdec_with_qdec_state
</UL>

<P><STRONG><a name="[127]"></a>nrf_drv_rtc_cc_set</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, nrf_drv_rtc.o(i.nrf_drv_rtc_cc_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_drv_rtc_cc_set &rArr; nrf_rtc_cc_set
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_enable
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_disable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_enable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_disable
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_cc_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[95]"></a>nrf_drv_rtc_disable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_drv_rtc.o(i.nrf_drv_rtc_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_rtc_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_event_handler
</UL>

<P><STRONG><a name="[c2]"></a>nrf_drv_rtc_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_drv_rtc.o(i.nrf_drv_rtc_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_rtc_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>

<P><STRONG><a name="[12f]"></a>nrf_drv_rtc_init</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, nrf_drv_rtc.o(i.nrf_drv_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_rtc_init &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[132]"></a>nrf_drv_rtc_tick_enable</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nrf_drv_rtc.o(i.nrf_drv_rtc_tick_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_rtc_tick_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_enable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_enable
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[b1]"></a>nrf_drv_spi_init</STRONG> (Thumb, 368 bytes, Stack size 56 bytes, nrf_drv_spi.o(i.nrf_drv_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_spi
</UL>

<P><STRONG><a name="[137]"></a>nrf_drv_spi_transfer</STRONG> (Thumb, 36 bytes, Stack size 56 bytes, nrf_drv_spi.o(i.nrf_drv_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReg
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg
</UL>

<P><STRONG><a name="[46]"></a>nrf_drv_spi_uninit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.nrf_drv_spi_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_spi_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSensor
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_spi
</UL>

<P><STRONG><a name="[138]"></a>nrf_drv_spi_xfer</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, nrf_drv_spi.o(i.nrf_drv_spi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrf_drv_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
</UL>

<P><STRONG><a name="[13b]"></a>nrf_drv_timer_compare</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nrf_drv_timer.o(i.nrf_drv_timer_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_timer_compare
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_int_enable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_int_disable
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_int_get
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_extended_compare
</UL>

<P><STRONG><a name="[bb]"></a>nrf_drv_timer_disable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_drv_timer.o(i.nrf_drv_timer_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_timer_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>

<P><STRONG><a name="[94]"></a>nrf_drv_timer_enable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_drv_timer.o(i.nrf_drv_timer_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_timer_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_event_handler
</UL>

<P><STRONG><a name="[111]"></a>nrf_drv_timer_extended_compare</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nrf_drv_timer.o(i.nrf_drv_timer_extended_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_timer_extended_compare &rArr; nrf_drv_timer_compare
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_shorts_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f]"></a>nrf_drv_timer_init</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, nrf_drv_timer.o(i.nrf_drv_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_drv_timer_init &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_get_IRQn
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[141]"></a>nrf_drv_uart_init</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.nrf_drv_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_get_IRQn
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_init
</UL>

<P><STRONG><a name="[145]"></a>nrf_drv_uart_tx</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_drv_uart_tx &rArr; nrf_drv_uart_tx_for_uart &rArr; tx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_in_progress
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[146]"></a>nrf_drv_uart_tx_in_progress</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_is_busy
</UL>

<P><STRONG><a name="[14b]"></a>nrf_drv_uart_uninit</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_drv_uart_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = nrf_drv_uart_uninit &rArr; pins_to_default &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pins_to_default
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_disable
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_get_IRQn
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_init
</UL>

<P><STRONG><a name="[14e]"></a>nrf_esb_disable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_fifos
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[28]"></a>nrf_esb_event_handler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(i.nrf_esb_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_esb_event_handler &rArr; nrf_esb_read_rx_payload
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_read_rx_payload
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_flush_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.esb_init)
</UL>
<P><STRONG><a name="[150]"></a>nrf_esb_flush_tx</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_flush_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_flush_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_event_handler
</UL>

<P><STRONG><a name="[d2]"></a>nrf_esb_init</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, nrf_esb.o(i.nrf_esb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_esb_init &rArr; nrf_esb_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_parameters
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timer_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppi_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_fifos
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
</UL>

<P><STRONG><a name="[151]"></a>nrf_esb_read_rx_payload</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_read_rx_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_read_rx_payload
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_event_handler
</UL>

<P><STRONG><a name="[d3]"></a>nrf_esb_set_address_length</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_set_address_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_set_address_length
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
</UL>

<P><STRONG><a name="[d4]"></a>nrf_esb_set_base_address_0</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_set_base_address_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_esb_set_base_address_0 &rArr; update_radio_addresses &rArr; addr_conv
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_addresses
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_base_address_0
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
</UL>

<P><STRONG><a name="[ac]"></a>nrf_esb_set_rf_channel</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nrf_esb.o(i.nrf_esb_set_rf_channel))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_rf_channel_switch
</UL>

<P><STRONG><a name="[d5]"></a>nrf_esb_set_tx_power</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_set_tx_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_set_tx_power
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_tx_power
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
</UL>

<P><STRONG><a name="[cc]"></a>nrf_esb_start_rx</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_start_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_start_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_pairing_mode
</UL>

<P><STRONG><a name="[ce]"></a>nrf_esb_stop_rx</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, nrf_esb.o(i.nrf_esb_stop_rx))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_pairing_mode
</UL>

<P><STRONG><a name="[b7]"></a>nrf_esb_update_prefix</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_esb.o(i.nrf_esb_update_prefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_esb_update_prefix &rArr; update_radio_addresses &rArr; addr_conv
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_addresses
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esb_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>

<P><STRONG><a name="[c8]"></a>nrf_esb_write_payload</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_write_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_esb_write_payload &rArr; start_tx_transaction
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_pairing_mode
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>

<P><STRONG><a name="[16c]"></a>nrf_log_backend_hexdump_handler_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_hexdump_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[160]"></a>nrf_log_backend_init</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_uninit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_blocking_backend_set
</UL>

<P><STRONG><a name="[16d]"></a>nrf_log_backend_std_handler_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_std_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[80]"></a>nrf_log_blocking_backend_set</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_log_blocking_backend_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[81]"></a>nrf_log_frontend_dequeue</STRONG> (Thumb, 506 bytes, Stack size 88 bytes, nrf_log_frontend.o(i.nrf_log_frontend_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_log_frontend_dequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOn
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_pairing_mode
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[ba]"></a>nrf_log_frontend_hexdump</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, nrf_log_frontend.o(i.nrf_log_frontend_hexdump))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nrf_log_frontend_hexdump &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>

<P><STRONG><a name="[16a]"></a>nrf_log_frontend_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_frontend_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_frontend_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_handlers_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[7f]"></a>nrf_log_frontend_std_0</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_evt_handler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrPaw3205setCPI
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOn
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_led_event_handler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BT_work_mode
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flash_write
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_pairing_mode
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_event_handler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[45]"></a>nrf_log_frontend_std_1</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_log_frontend_std_1 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_evt_handler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_event_handler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyProductId
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSensor
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOn
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_pairing_mode
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>

<P><STRONG><a name="[16b]"></a>nrf_log_handlers_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_handlers_set))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_init
</UL>

<P><STRONG><a name="[10d]"></a>nrf_log_init</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.nrf_log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = nrf_log_init &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_std_handler_get
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_hexdump_handler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>nrf_queue_is_full</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_queue.o(i.nrf_queue_is_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_queue_is_full
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_next_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
</UL>

<P><STRONG><a name="[5e]"></a>nrf_queue_push</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, nrf_queue.o(i.nrf_queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_queue_push &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_full
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_utilization_get
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_next_idx
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_IRQHandler
</UL>

<P><STRONG><a name="[4b]"></a>readReg</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, motion_sensor.o(i.readReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = readReg &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_sensor_two_spi_send_byte
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_sensor_two_spi_read_byte
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyProductId
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChenkSensorSync
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrPaw3205setCPI
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOn
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMotion
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterOrExitSleepmode
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>set_BT_work_mode</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, main.o(i.set_BT_work_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = set_BT_work_mode &rArr; usrPaw3205setCPI &rArr; writeReg &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_word_write
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrPaw3205setCPI
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOn
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterOrExitSleepmode
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_led_event_handler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_pairing_mode
</UL>

<P><STRONG><a name="[5d]"></a>softdevice_handler_is_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_handler_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_IRQHandler
</UL>

<P><STRONG><a name="[26]"></a>spi_event_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.spi_event_handler))
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.enable_spi)
<LI> main.o(i.main)
</UL>
<P><STRONG><a name="[bc]"></a>system_off</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.system_off))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>

<P><STRONG><a name="[2a]"></a>timer_for_sleep_event_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.timer_for_sleep_event_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[29]"></a>timer_led_event_handler</STRONG> (Thumb, 554 bytes, Stack size 16 bytes, main.o(i.timer_led_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = timer_led_event_handler &rArr; set_BT_work_mode &rArr; usrPaw3205setCPI &rArr; writeReg &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_sample
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BT_work_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[c5]"></a>turnOn</STRONG> (Thumb, 736 bytes, Stack size 8 bytes, motion_sensor.o(i.turnOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = turnOn &rArr; verifyProductId &rArr; readReg &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_execute
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReg
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyProductId
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_evt_handler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BT_work_mode
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>

<P><STRONG><a name="[48]"></a>usrPaw3205ReSynchronousSPI</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, motion_sensor.o(i.usrPaw3205ReSynchronousSPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = usrPaw3205ReSynchronousSPI &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSensor
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>usrPaw3205setCPI</STRONG> (Thumb, 416 bytes, Stack size 16 bytes, motion_sensor.o(i.usrPaw3205setCPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = usrPaw3205setCPI &rArr; writeReg &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReg
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_evt_handler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BT_work_mode
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>

<P><STRONG><a name="[18f]"></a>verifyProductId</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, motion_sensor.o(i.verifyProductId))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = verifyProductId &rArr; readReg &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOn
</UL>

<P><STRONG><a name="[b3]"></a>writeReg</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, motion_sensor.o(i.writeReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = writeReg &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_sensor_two_spi_send_byte
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrPaw3205setCPI
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOn
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterOrExitjustSleepmode
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterOrExitSleepmode
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e2]"></a>NVIC_SystemReset</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_evt_handler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BT_work_mode
</UL>

<P><STRONG><a name="[73]"></a>adc_config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(i.adc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = adc_config &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_channel_enable
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_led_event_handler
</UL>

<P><STRONG><a name="[25]"></a>adc_event_handler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, main.o(i.adc_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = adc_event_handler &rArr; nrf_log_frontend_std_1 &rArr; buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_uninit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.adc_config)
</UL>
<P><STRONG><a name="[b8]"></a>flash_page_erase</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, main.o(i.flash_page_erase))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BT_work_mode
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>

<P><STRONG><a name="[b9]"></a>flash_word_write</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, main.o(i.flash_word_write))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BT_work_mode
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>

<P><STRONG><a name="[0]"></a>fs_evt_handler</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, main.o(i.fs_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = fs_evt_handler &rArr; usrPaw3205setCPI &rArr; writeReg &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrPaw3205setCPI
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOn
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterOrExitSleepmode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_flash_write
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_spi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(fs_data)
</UL>
<P><STRONG><a name="[103]"></a>lfclk_config</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(i.lfclk_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = lfclk_config &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>mouse_scroll_send</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, main.o(i.mouse_scroll_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = mouse_scroll_send &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hids_inp_rep_send
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdec_event_handler
</UL>

<P><STRONG><a name="[e1]"></a>nrf_delay_ms</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_evt_handler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BT_work_mode
</UL>

<P><STRONG><a name="[cd]"></a>nrf_delay_us</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, main.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_pairing_mode
</UL>

<P><STRONG><a name="[c3]"></a>nrf_drv_rtc_counter_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.nrf_drv_rtc_counter_clear))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_handler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>

<P><STRONG><a name="[110]"></a>nrf_drv_timer_ms_to_ticks</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.nrf_drv_timer_ms_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_timer_ms_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15d]"></a>nrf_gpio_cfg</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, main.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[a3]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, main.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_QDEC_state
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_pairing_mode
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_direction
</UL>

<P><STRONG><a name="[a5]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_direction
</UL>

<P><STRONG><a name="[a6]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(i.nrf_gpio_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_direction
</UL>

<P><STRONG><a name="[a4]"></a>nrf_gpio_ports_read</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, main.o(i.nrf_gpio_ports_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_ports_read
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_led_event_handler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_QDEC_state
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_pairing_mode
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_direction
</UL>

<P><STRONG><a name="[bf]"></a>nrf_qdec_reportper_to_value</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.nrf_qdec_reportper_to_value))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_normal_mode
</UL>

<P><STRONG><a name="[27]"></a>qdec_event_handler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, main.o(i.qdec_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = qdec_event_handler &rArr; mouse_scroll_send &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouse_scroll_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.enter_normal_mode)
</UL>
<P><STRONG><a name="[10e]"></a>rtc_config</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, main.o(i.rtc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = rtc_config &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_tick_enable
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_enable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_cc_set
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>rtc_handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i.rtc_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_counter_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.rtc_config)
</UL>
<P><STRONG><a name="[4f]"></a>nrf_delay_ms</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, motion_sensor.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomSensorReSynchronousSPI
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrPaw3205ReSynchronousSPI
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOn
</UL>

<P><STRONG><a name="[4e]"></a>nrf_delay_us</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, motion_sensor.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomSensorReSynchronousSPI
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrPaw3205ReSynchronousSPI
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOn
</UL>

<P><STRONG><a name="[15e]"></a>nrf_gpio_cfg</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, motion_sensor.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[ae]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, motion_sensor.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_sensor_two_spi_send_byte
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_sensor_two_spi_read_byte
</UL>

<P><STRONG><a name="[4c]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, motion_sensor.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_sensor_two_spi_send_byte
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_sensor_two_spi_read_byte
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomSensorReSynchronousSPI
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrPaw3205ReSynchronousSPI
</UL>

<P><STRONG><a name="[af]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, motion_sensor.o(i.nrf_gpio_pin_read))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_sensor_two_spi_read_byte
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMotion
</UL>

<P><STRONG><a name="[4d]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, motion_sensor.o(i.nrf_gpio_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_sensor_two_spi_send_byte
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_sensor_two_spi_read_byte
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomSensorReSynchronousSPI
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrPaw3205ReSynchronousSPI
</UL>

<P><STRONG><a name="[8f]"></a>nrf_gpio_cfg</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, boards.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
</UL>

<P><STRONG><a name="[8c]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, boards.o(i.nrf_gpio_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>

<P><STRONG><a name="[5a]"></a>clock_clk_started_notify</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.clock_clk_started_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_soc_event
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>item_dequeue</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.item_dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>

<P><STRONG><a name="[11a]"></a>item_enqueue</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.item_enqueue))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
</UL>

<P><STRONG><a name="[106]"></a>lfclk_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.lfclk_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfclk_start
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_enable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
</UL>

<P><STRONG><a name="[57]"></a>nrf_clock_event_check</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[58]"></a>nrf_clock_event_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_start
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[59]"></a>nrf_clock_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[107]"></a>nrf_clock_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_start
</UL>

<P><STRONG><a name="[108]"></a>nrf_clock_task_trigger</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_start
</UL>

<P><STRONG><a name="[11b]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, nrf_drv_common.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>

<P><STRONG><a name="[124]"></a>channel_free</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[53]"></a>channel_handler_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[121]"></a>channel_port_alloc</STRONG> (Thumb, 116 bytes, Stack size 52 bytes, nrf_drv_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[55]"></a>channel_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[54]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, nrf_drv_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_bitmask_bit_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[122]"></a>nrf_gpio_cfg</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[56]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_gpio_cfg_sense_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[11e]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpio_pin_read))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[52]"></a>nrf_gpio_ports_read</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, nrf_drv_gpiote.o(i.nrf_gpio_ports_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_ports_read
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[15f]"></a>nrf_gpiote_event_addr_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_addr_get))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
</UL>

<P><STRONG><a name="[51]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[50]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_is_set
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[11f]"></a>nrf_gpiote_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[120]"></a>pin_in_use_by_gpiote</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_gpiote))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[11c]"></a>pin_in_use_by_port</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_port))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
</UL>

<P><STRONG><a name="[11d]"></a>pin_in_use_by_te</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_te))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
</UL>

<P><STRONG><a name="[123]"></a>pin_in_use_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_clear))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[85]"></a>apply_config</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_txrx_pins_set
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_hwfc_pins_set
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[144]"></a>nrf_drv_get_IRQn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_drv_get_IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_uninit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[147]"></a>nrf_drv_uart_tx_for_uart</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx_for_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_uart_tx_for_uart &rArr; tx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[15c]"></a>nrf_gpio_cfg</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>

<P><STRONG><a name="[15b]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pins_to_default
</UL>

<P><STRONG><a name="[88]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[87]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[86]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[199]"></a>nrf_uart_errorsrc_get_and_clear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_errorsrc_get_and_clear))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[14a]"></a>nrf_uart_event_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uart
</UL>

<P><STRONG><a name="[142]"></a>nrf_uart_event_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uart
</UL>

<P><STRONG><a name="[8a]"></a>nrf_uart_hwfc_pins_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_hwfc_pins_set))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pins_to_default
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[14c]"></a>nrf_uart_int_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_uninit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[143]"></a>nrf_uart_int_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[198]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[148]"></a>nrf_uart_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uart
</UL>

<P><STRONG><a name="[89]"></a>nrf_uart_txrx_pins_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_txrx_pins_set))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pins_to_default
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[14d]"></a>pins_to_default</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.pins_to_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = pins_to_default &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_txrx_pins_set
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_hwfc_pins_set
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_uninit
</UL>

<P><STRONG><a name="[187]"></a>rx_byte</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[19a]"></a>rx_done_event</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[149]"></a>tx_byte</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.tx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uart
</UL>

<P><STRONG><a name="[19b]"></a>tx_done_event</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[6e]"></a>uart_irq_handler</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_disable
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_errorsrc_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, nrf_drv_qdec.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_qdec_init
</UL>

<P><STRONG><a name="[5b]"></a>nrf_qdec_int_enable_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_qdec.o(i.nrf_qdec_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDEC_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>finish_transfer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_drv_spi.o(i.finish_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finish_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spi
</UL>

<P><STRONG><a name="[64]"></a>irq_handler_spi</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.irq_handler_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irq_handler_spi &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_event_clear
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_TWI0_IRQHandler
</UL>

<P><STRONG><a name="[135]"></a>nrf_gpio_cfg</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, nrf_drv_spi.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>

<P><STRONG><a name="[134]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[133]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
</UL>

<P><STRONG><a name="[da]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>

<P><STRONG><a name="[fd]"></a>nrf_spi_event_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spi_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spi
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>

<P><STRONG><a name="[139]"></a>nrf_spi_int_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spi_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>

<P><STRONG><a name="[136]"></a>nrf_spi_int_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spi_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>

<P><STRONG><a name="[188]"></a>nrf_spi_txd_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spi_txd_set))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_byte
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>

<P><STRONG><a name="[13a]"></a>spi_xfer</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.spi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_int_disable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_event_clear
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_byte
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_txd_set
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
</UL>

<P><STRONG><a name="[fe]"></a>transfer_byte</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, nrf_drv_spi.o(i.transfer_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_txd_set
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spi
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>

<P><STRONG><a name="[6d]"></a>irq_handler</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, nrf_drv_timer.o(i.irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_int_get
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>nrf_drv_get_IRQn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_drv_get_IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
</UL>

<P><STRONG><a name="[fa]"></a>nrf_timer_compare_event_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_compare_event_get))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[fb]"></a>nrf_timer_compare_int_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_compare_int_get))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[fc]"></a>nrf_timer_event_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[13d]"></a>nrf_timer_int_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
</UL>

<P><STRONG><a name="[13c]"></a>nrf_timer_int_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
</UL>

<P><STRONG><a name="[13f]"></a>nrf_timer_shorts_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_shorts_disable))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_extended_compare
</UL>

<P><STRONG><a name="[13e]"></a>nrf_timer_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_enable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_disable
</UL>

<P><STRONG><a name="[16e]"></a>nrf_queue_next_idx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_queue.o(i.nrf_queue_next_idx))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_full
</UL>

<P><STRONG><a name="[16f]"></a>queue_utilization_get</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, nrf_queue.o(i.queue_utilization_get))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
</UL>

<P><STRONG><a name="[60]"></a>nrf_drv_rng_stop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_rng.o(i.nrf_drv_rng_stop))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_IRQHandler
</UL>

<P><STRONG><a name="[42]"></a>adc_sample_process</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, nrf_drv_adc.o(i.adc_sample_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_sample_process
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_event_clear
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_config_set
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[78]"></a>nrf_adc_config_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_adc_config_set))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample_process
</UL>

<P><STRONG><a name="[118]"></a>nrf_adc_event_check</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_adc_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
</UL>

<P><STRONG><a name="[40]"></a>nrf_adc_event_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_adc_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample_process
</UL>

<P><STRONG><a name="[41]"></a>nrf_adc_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_adc_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_uninit
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[117]"></a>nrf_adc_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_adc_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
</UL>

<P><STRONG><a name="[62]"></a>nrf_drv_rtc_int_handler</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, nrf_drv_rtc.o(i.nrf_drv_rtc_int_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_rtc_int_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_is_enabled
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_pending
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC0_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>nrf_rtc_cc_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_rtc.o(i.nrf_rtc_cc_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_rtc_cc_set
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_cc_set
</UL>

<P><STRONG><a name="[12b]"></a>nrf_rtc_event_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_rtc.o(i.nrf_rtc_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_tick_enable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_cc_set
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_int_handler
</UL>

<P><STRONG><a name="[128]"></a>nrf_rtc_event_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_rtc.o(i.nrf_rtc_event_disable))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_cc_set
</UL>

<P><STRONG><a name="[12d]"></a>nrf_rtc_event_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_rtc.o(i.nrf_rtc_event_enable))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_tick_enable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_cc_set
</UL>

<P><STRONG><a name="[131]"></a>nrf_rtc_event_pending</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_rtc.o(i.nrf_rtc_event_pending))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_int_handler
</UL>

<P><STRONG><a name="[129]"></a>nrf_rtc_int_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_rtc.o(i.nrf_rtc_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_cc_set
</UL>

<P><STRONG><a name="[12c]"></a>nrf_rtc_int_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_rtc.o(i.nrf_rtc_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_tick_enable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_cc_set
</UL>

<P><STRONG><a name="[130]"></a>nrf_rtc_int_is_enabled</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_rtc.o(i.nrf_rtc_int_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_int_handler
</UL>

<P><STRONG><a name="[12e]"></a>nrf_rtc_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_rtc.o(i.nrf_rtc_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_enable
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_disable
</UL>

<P><STRONG><a name="[65]"></a>irq_handler_twi</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, nrf_drv_twi.o(i.irq_handler_twi))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = irq_handler_twi &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_errorsrc_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_TWI1_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>nrf_twi_errorsrc_get_and_clear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twi_errorsrc_get_and_clear))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twi
</UL>

<P><STRONG><a name="[197]"></a>nrf_twi_event_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twi_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>

<P><STRONG><a name="[193]"></a>nrf_twi_event_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twi_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
</UL>

<P><STRONG><a name="[194]"></a>nrf_twi_int_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twi_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
</UL>

<P><STRONG><a name="[191]"></a>nrf_twi_shorts_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twi_shorts_set))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_receive_byte
</UL>

<P><STRONG><a name="[192]"></a>nrf_twi_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twi_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_send_byte
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_receive_byte
</UL>

<P><STRONG><a name="[195]"></a>twi_process_error</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.twi_process_error))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
</UL>

<P><STRONG><a name="[190]"></a>twi_receive_byte</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.twi_receive_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = twi_receive_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_task_trigger
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_shorts_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>

<P><STRONG><a name="[101]"></a>twi_rx_start_transfer</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, nrf_drv_twi.o(i.twi_rx_start_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = twi_rx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_process_error
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_task_trigger
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_shorts_set
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_int_enable
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_clear
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_errorsrc_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twi
</UL>

<P><STRONG><a name="[196]"></a>twi_send_byte</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.twi_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>

<P><STRONG><a name="[ff]"></a>twi_transfer</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, nrf_drv_twi.o(i.twi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_send_byte
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_receive_byte
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_task_trigger
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_clear
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twi
</UL>

<P><STRONG><a name="[100]"></a>twi_tx_start_transfer</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, nrf_drv_twi.o(i.twi_tx_start_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_send_byte
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_process_error
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_task_trigger
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_shorts_set
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_int_enable
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_clear
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_errorsrc_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twi
</UL>

<P><STRONG><a name="[83]"></a>next_index</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_scheduler.o(i.next_index))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_execute
</UL>

<P><STRONG><a name="[185]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[186]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[18e]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>

<P><STRONG><a name="[97]"></a>compare_reg_update</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = compare_reg_update &rArr; timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_compare0_set
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[18b]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[18c]"></a>expired_timers_handler</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, app_timer.o(i.expired_timers_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = expired_timers_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[109]"></a>list_deletions_handler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, app_timer.o(i.list_deletions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = list_deletions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[10b]"></a>list_insertions_handler</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_insertions_handler &rArr; timer_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[9c]"></a>nrf_delay_us</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, app_timer.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[9b]"></a>rtc1_compare0_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.rtc1_compare0_set))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[98]"></a>rtc1_counter_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.rtc1_counter_get))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[9a]"></a>rtc1_start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc1_start
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[9e]"></a>rtc1_stop</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[99]"></a>ticks_diff_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_timer.o(i.ticks_diff_get))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[189]"></a>timeout_handler_exec</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, app_timer.o(i.timeout_handler_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = timeout_handler_exec &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[66]"></a>timer_list_handler</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = timer_list_handler &rArr; compare_reg_update &rArr; timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expired_timers_handler
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_IRQHandler
</UL>

<P><STRONG><a name="[18d]"></a>timer_list_handler_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_handler_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[10c]"></a>timer_list_insert</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[10a]"></a>timer_list_remove</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, app_timer.o(i.timer_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = timer_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
</UL>

<P><STRONG><a name="[63]"></a>timer_timeouts_check</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = timer_timeouts_check &rArr; timeout_handler_exec &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>timer_timeouts_check_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(i.timer_timeouts_check_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[84]"></a>__sd_nvic_irq_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_util_platform.o(i.__sd_nvic_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[7b]"></a>address_is_valid</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fds.o(i.address_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = address_is_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>

<P><STRONG><a name="[184]"></a>chunk_queue_get_and_advance</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fds.o(i.chunk_queue_get_and_advance))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_write_chunk
</UL>

<P><STRONG><a name="[176]"></a>chunk_queue_skip</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fds.o(i.chunk_queue_skip))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[9f]"></a>delete_execute</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fds.o(i.delete_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_and_delete
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find_and_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[d6]"></a>event_prepare</STRONG> (Thumb, 120 bytes, Stack size 4 bytes, fds.o(i.event_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = event_prepare &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[177]"></a>event_send</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fds.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[a1]"></a>file_find_and_delete</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, fds.o(i.file_find_and_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = file_find_and_delete &rArr; record_header_flag_dirty &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[f5]"></a>flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fds.o(i.flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
</UL>

<P><STRONG><a name="[17c]"></a>flag_is_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fds.o(i.flag_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>

<P><STRONG><a name="[f6]"></a>flag_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fds.o(i.flag_set))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
</UL>

<P><STRONG><a name="[1]"></a>fs_event_handler</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, fds.o(i.fs_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = fs_event_handler &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fds.o(fs_data)
</UL>
<P><STRONG><a name="[e4]"></a>gc_execute</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, fds.o(i.gc_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_tag_new_swap
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_promote
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[ef]"></a>gc_init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, fds.o(i.gc_init))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
</UL>

<P><STRONG><a name="[e6]"></a>gc_next_page</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fds.o(i.gc_next_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_next
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[e9]"></a>gc_page_erase</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fds.o(i.gc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gc_page_erase &rArr; gc_swap_erase &rArr; fs_erase &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[ec]"></a>gc_page_next</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, fds.o(i.gc_page_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gc_page_next
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
</UL>

<P><STRONG><a name="[e8]"></a>gc_record_copy</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fds.o(i.gc_record_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gc_record_copy &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[e7]"></a>gc_record_find_next</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fds.o(i.gc_record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gc_record_find_next &rArr; gc_record_copy &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[e5]"></a>gc_state_advance</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, fds.o(i.gc_state_advance))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gc_state_advance &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_update_swap_offset
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_pages
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[ed]"></a>gc_swap_erase</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fds.o(i.gc_swap_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gc_swap_erase &rArr; fs_erase &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>

<P><STRONG><a name="[f1]"></a>gc_swap_pages</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, fds.o(i.gc_swap_pages))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
</UL>

<P><STRONG><a name="[ea]"></a>gc_swap_promote</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fds.o(i.gc_swap_promote))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gc_swap_promote &rArr; page_tag_write_data &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[eb]"></a>gc_tag_new_swap</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fds.o(i.gc_tag_new_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gc_tag_new_swap &rArr; page_tag_write_swap &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[f0]"></a>gc_update_swap_offset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fds.o(i.gc_update_swap_offset))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
</UL>

<P><STRONG><a name="[17f]"></a>header_is_valid</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fds.o(i.header_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
</UL>

<P><STRONG><a name="[f4]"></a>init_execute</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, fds.o(i.init_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = init_execute &rArr; page_tag_write_data &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_set
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[7c]"></a>is_word_aligned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fds.o(i.is_word_aligned))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_is_valid
</UL>

<P><STRONG><a name="[17e]"></a>page_from_record</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, fds.o(i.page_from_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = page_from_record
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>

<P><STRONG><a name="[19f]"></a>page_offsets_update</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fds.o(i.page_offsets_update))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[f2]"></a>page_tag_write_data</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fds.o(i.page_tag_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = page_tag_write_data &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_promote
</UL>

<P><STRONG><a name="[f3]"></a>page_tag_write_swap</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fds.o(i.page_tag_write_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = page_tag_write_swap &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_tag_new_swap
</UL>

<P><STRONG><a name="[174]"></a>queue_advance</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, fds.o(i.queue_advance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = queue_advance
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[df]"></a>queue_process</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, fds.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + In Cycle
<LI>Call Chain = queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_advance
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_clear
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_prepare
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunk_queue_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_event_handler
</UL>

<P><STRONG><a name="[d7]"></a>record_find</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, fds.o(i.record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find_and_delete
</UL>

<P><STRONG><a name="[a0]"></a>record_find_and_delete</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, fds.o(i.record_find_and_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = record_find_and_delete &rArr; record_header_flag_dirty &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[17d]"></a>record_find_by_desc</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fds.o(i.record_find_by_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_from_record
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_and_delete
</UL>

<P><STRONG><a name="[ee]"></a>record_find_next</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, fds.o(i.record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
</UL>

<P><STRONG><a name="[d8]"></a>record_header_flag_dirty</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, fds.o(i.record_header_flag_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = record_header_flag_dirty &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_and_delete
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find_and_delete
</UL>

<P><STRONG><a name="[180]"></a>record_header_write_begin</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fds.o(i.record_header_write_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = record_header_write_begin &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[181]"></a>record_header_write_finalize</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, fds.o(i.record_header_write_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = record_header_write_finalize &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[182]"></a>record_header_write_id</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, fds.o(i.record_header_write_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = record_header_write_id &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[183]"></a>record_write_chunk</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, fds.o(i.record_write_chunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = record_write_chunk &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunk_queue_get_and_advance
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[175]"></a>write_execute</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, fds.o(i.write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = write_execute &rArr; record_write_chunk &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_write_chunk
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_id
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_finalize
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_begin
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_offsets_update
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[dc]"></a>check_config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fstorage.o(i.check_config))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>

<P><STRONG><a name="[17a]"></a>erase_execute</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fstorage.o(i.erase_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = erase_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[dd]"></a>queue_get_next_free</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fstorage.o(i.queue_get_next_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = queue_get_next_free
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>

<P><STRONG><a name="[178]"></a>queue_process</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fstorage.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_execute
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_event
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
</UL>

<P><STRONG><a name="[de]"></a>queue_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fstorage.o(i.queue_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>

<P><STRONG><a name="[17b]"></a>send_event</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, fstorage.o(i.send_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[179]"></a>store_execute</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fstorage.o(i.store_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = store_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[168]"></a>buf_len_update</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_log_backend_serial.o(i.buf_len_update))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_process
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
</UL>

<P><STRONG><a name="[164]"></a>byte2hex</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, nrf_log_backend_serial.o(i.byte2hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = byte2hex
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[2d]"></a>nrf_log_backend_serial_hexdump_handler</STRONG> (Thumb, 350 bytes, Stack size 328 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_serial_hexdump_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = nrf_log_backend_serial_hexdump_handler &rArr; serial_tx &rArr; nrf_drv_uart_tx &rArr; nrf_drv_uart_tx_for_uart &rArr; tx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_process
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_is_busy
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte2hex
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_serial.o(i.nrf_log_backend_hexdump_handler_get)
</UL>
<P><STRONG><a name="[2f]"></a>nrf_log_backend_serial_std_handler</STRONG> (Thumb, 404 bytes, Stack size 320 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_serial_std_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = nrf_log_backend_serial_std_handler &rArr; serial_tx &rArr; nrf_drv_uart_tx &rArr; nrf_drv_uart_tx_for_uart &rArr; tx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_process
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_is_busy
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_len_update
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_serial.o(i.nrf_log_backend_std_handler_get)
</UL>
<P><STRONG><a name="[161]"></a>serial_is_busy</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_log_backend_serial.o(i.serial_is_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = serial_is_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_in_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[166]"></a>serial_tx</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, nrf_log_backend_serial.o(i.serial_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = serial_tx &rArr; nrf_drv_uart_tx &rArr; nrf_drv_uart_tx_for_uart &rArr; tx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[162]"></a>timestamp_process</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, nrf_log_backend_serial.o(i.timestamp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = timestamp_process &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_len_update
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[2e]"></a>uart_event_handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_log_backend_serial.o(i.uart_event_handler))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_serial.o(i.nrf_log_backend_init)
</UL>
<P><STRONG><a name="[91]"></a>buf_prealloc</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.buf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = buf_prealloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
</UL>

<P><STRONG><a name="[159]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_esb.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_start_rx
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
</UL>

<P><STRONG><a name="[14f]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_esb.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_read_rx_payload
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_flush_tx
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_fifo_remove_last
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_clear_interrupts
</UL>

<P><STRONG><a name="[152]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_esb.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_start_rx
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_read_rx_payload
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_flush_tx
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_fifo_remove_last
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_clear_interrupts
</UL>

<P><STRONG><a name="[172]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_esb.o(i.NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_wait_for_ack
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_noack
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_rx
</UL>

<P><STRONG><a name="[156]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, nrf_esb.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[79]"></a>addr_conv</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_esb.o(i.addr_conv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = addr_conv
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytewise_bit_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_addresses
</UL>

<P><STRONG><a name="[7a]"></a>bytewise_bit_swap</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, nrf_esb.o(i.bytewise_bit_swap))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_addresses
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_conv
</UL>

<P><STRONG><a name="[170]"></a>clear_events_restart_rx</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, nrf_esb.o(i.clear_events_restart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_events_restart_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_rx
</UL>

<P><STRONG><a name="[f7]"></a>initialize_fifos</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nrf_esb.o(i.initialize_fifos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initialize_fifos
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_fifos
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[69]"></a>nrf_esb_get_clear_interrupts</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_get_clear_interrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_get_clear_interrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI3_IRQHandler
</UL>

<P><STRONG><a name="[2c]"></a>on_radio_disabled_rx</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, nrf_esb.o(i.on_radio_disabled_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_radio_disabled_rx &rArr; rx_fifo_push_rfbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_fifo_push_rfbuf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_events_restart_rx
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_esb.o(i.nrf_esb_start_rx)
<LI> nrf_esb.o(i.on_radio_disabled_rx_ack)
</UL>
<P><STRONG><a name="[30]"></a>on_radio_disabled_rx_ack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf_esb.o(i.on_radio_disabled_rx_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_radio_disabled_rx_ack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_esb.o(i.on_radio_disabled_rx)
</UL>
<P><STRONG><a name="[32]"></a>on_radio_disabled_tx</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, nrf_esb.o(i.on_radio_disabled_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_radio_disabled_tx
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_esb.o(i.on_radio_disabled_tx_wait_for_ack)
<LI> nrf_esb.o(i.start_tx_transaction)
</UL>
<P><STRONG><a name="[34]"></a>on_radio_disabled_tx_noack</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrf_esb.o(i.on_radio_disabled_tx_noack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_radio_disabled_tx_noack &rArr; tx_fifo_remove_last
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_fifo_remove_last
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_esb.o(i.start_tx_transaction)
</UL>
<P><STRONG><a name="[31]"></a>on_radio_disabled_tx_wait_for_ack</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, nrf_esb.o(i.on_radio_disabled_tx_wait_for_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = on_radio_disabled_tx_wait_for_ack &rArr; rx_fifo_push_rfbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_fifo_remove_last
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_fifo_push_rfbuf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_esb.o(i.on_radio_disabled_tx)
</UL>
<P><STRONG><a name="[155]"></a>ppi_init</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, nrf_esb.o(i.ppi_init))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[f8]"></a>reset_fifos</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_esb.o(i.reset_fifos))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_fifos
</UL>

<P><STRONG><a name="[171]"></a>rx_fifo_push_rfbuf</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, nrf_esb.o(i.rx_fifo_push_rfbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rx_fifo_push_rfbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_wait_for_ack
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_rx
</UL>

<P><STRONG><a name="[15a]"></a>start_tx_transaction</STRONG> (Thumb, 332 bytes, Stack size 8 bytes, nrf_esb.o(i.start_tx_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = start_tx_transaction
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_wait_for_ack
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_noack
</UL>

<P><STRONG><a name="[154]"></a>sys_timer_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_esb.o(i.sys_timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[173]"></a>tx_fifo_remove_last</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrf_esb.o(i.tx_fifo_remove_last))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tx_fifo_remove_last
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_wait_for_ack
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_noack
</UL>

<P><STRONG><a name="[157]"></a>update_radio_addresses</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, nrf_esb.o(i.update_radio_addresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_radio_addresses &rArr; addr_conv
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytewise_bit_swap
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_conv
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_update_prefix
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_0
</UL>

<P><STRONG><a name="[19c]"></a>update_radio_bitrate</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, nrf_esb.o(i.update_radio_bitrate))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_parameters
</UL>

<P><STRONG><a name="[19e]"></a>update_radio_crc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nrf_esb.o(i.update_radio_crc))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_parameters
</UL>

<P><STRONG><a name="[153]"></a>update_radio_parameters</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_esb.o(i.update_radio_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = update_radio_parameters
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_tx_power
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_protocol
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_crc
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_bitrate
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[19d]"></a>update_radio_protocol</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrf_esb.o(i.update_radio_protocol))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_parameters
</UL>

<P><STRONG><a name="[158]"></a>update_radio_tx_power</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_esb.o(i.update_radio_tx_power))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_tx_power
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_parameters
</UL>

<P><STRONG><a name="[36]"></a>update_rf_payload_format_esb</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_esb.o(i.update_rf_payload_format_esb))
<BR>[Address Reference Count : 1]<UL><LI> nrf_esb.o(i.update_radio_protocol)
</UL>
<P><STRONG><a name="[35]"></a>update_rf_payload_format_esb_dpl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_esb.o(i.update_rf_payload_format_esb_dpl))
<BR>[Address Reference Count : 1]<UL><LI> nrf_esb.o(i.update_radio_protocol)
</UL>
<P><STRONG><a name="[6b]"></a>is_disabled_in_debug_needed</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, system_nrf51.o(i.is_disabled_in_debug_needed))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[6a]"></a>is_manual_peripheral_setup_needed</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, system_nrf51.o(i.is_manual_peripheral_setup_needed))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[6c]"></a>is_peripheral_domain_setup_needed</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf51.o(i.is_peripheral_domain_setup_needed))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[70]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$8
</UL>

<P><STRONG><a name="[72]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[71]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[24]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf8.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0snprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
